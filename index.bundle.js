/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["testpackage"] = factory();
	else
		root["TEST"] = factory();
})((typeof self!='undefined'?self:this), function() {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "../node_modules/@alt1/base/dist/alt1api.js":
/*!**************************************************!*\
  !*** ../node_modules/@alt1/base/dist/alt1api.js ***!
  \**************************************************/
/***/ (() => {

"use strict";
eval("\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BhbHQxL2Jhc2UvZGlzdC9hbHQxYXBpLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vVEVTVC8uLi9ub2RlX21vZHVsZXMvQGFsdDEvYmFzZS9kaXN0L2FsdDFhcGkuanM/YWJjZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../node_modules/@alt1/base/dist/alt1api.js\n");

/***/ }),

/***/ "../node_modules/@alt1/base/dist/declarations.js":
/*!*******************************************************!*\
  !*** ../node_modules/@alt1/base/dist/declarations.js ***!
  \*******************************************************/
/***/ (() => {

"use strict";
eval("\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BhbHQxL2Jhc2UvZGlzdC9kZWNsYXJhdGlvbnMuanMuanMiLCJtYXBwaW5ncyI6IkFBQWEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9URVNULy4uL25vZGVfbW9kdWxlcy9AYWx0MS9iYXNlL2Rpc3QvZGVjbGFyYXRpb25zLmpzP2JiMGIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/@alt1/base/dist/declarations.js\n");

/***/ }),

/***/ "../node_modules/@alt1/base/dist/imagedata-extensions.js":
/*!***************************************************************!*\
  !*** ../node_modules/@alt1/base/dist/imagedata-extensions.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ImageData\": () => (/* binding */ ImageData)\n/* harmony export */ });\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.js */ \"../node_modules/@alt1/base/dist/index.js\");\n/* harmony import */ var _nodepolyfill_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./nodepolyfill.js */ \"../node_modules/@alt1/base/dist/nodepolyfill.js\");\n\r\n\r\n//export this so node.js can also use it\r\nvar ImageData;\r\n// //TODO revamp this madness a bit?\r\n// (function () {\r\n// \tvar globalvar = (typeof self != \"undefined\" ? self : (typeof (global as any) != \"undefined\" ? (global as any) : null)) as any;\r\n// \t//use the node-canvas version when on node\r\n// \tif (typeof globalvar.ImageData == \"undefined\") {\r\n// \t\tlet nodecnv = requireNodeCanvas();\r\n// \t\tglobalvar.ImageData = nodecnv.ImageData;\r\n// \t}\r\n// \tvar fill = typeof globalvar.ImageData == \"undefined\";\r\n// \t//should never be reach anymore\r\n// \tvar constr = function (this: any) {\r\n// \t\tvar i = 0;\r\n// \t\tvar data = (arguments[i] instanceof Uint8ClampedArray ? arguments[i++] : null);\r\n// \t\tvar width = arguments[i++];\r\n// \t\tvar height = arguments[i++];\r\n// \t\tif (fill) {\r\n// \t\t\tif (!data) { data = new Uint8ClampedArray(width * height * 4); }\r\n// \t\t\tthis.width = width;\r\n// \t\t\tthis.height = height;\r\n// \t\t\tthis.data = data;\r\n// \t\t}\r\n// \t\telse if (oldconstr) {\r\n// \t\t\treturn (data ? new oldconstr(data, width, height) : new oldconstr(width, height));\r\n// \t\t} else {\r\n// \t\t\tvar canvas = document.createElement('canvas');\r\n// \t\t\tcanvas.width = width;\r\n// \t\t\tcanvas.height = height;\r\n// \t\t\tvar ctx = canvas.getContext(\"2d\")!;\r\n// \t\t\tvar imageData = ctx.createImageData(width, height);\r\n// \t\t\tif (data) { imageData.data.set(data); }\r\n// \t\t\treturn imageData;\r\n// \t\t}\r\n// \t}\r\n// \tvar oldconstr = globalvar.ImageData;\r\n// \tif (typeof document != \"undefined\") {\r\n// \t\ttry {\r\n// \t\t\tnew oldconstr(1, 1);\r\n// \t\t} catch (e) {\r\n// \t\t\t//direct constructor call not allowed in ie\r\n// \t\t\toldconstr = null;\r\n// \t\t}\r\n// \t}\r\n// \tif (!fill) { constr.prototype = globalvar.ImageData.prototype; }\r\n// \tglobalvar.ImageData = constr;\r\n// \tImageData = constr as any;\r\n// })();\r\n(function () {\r\n    var globalvar = (typeof self != \"undefined\" ? self : (typeof global != \"undefined\" ? global : null));\r\n    var filltype = typeof globalvar.ImageData == \"undefined\" || typeof globalvar.document == \"undefined\";\r\n    var fillconstr = filltype;\r\n    if (!filltype) {\r\n        var oldconstr = globalvar.ImageData;\r\n        try {\r\n            let data = new Uint8ClampedArray(4);\r\n            data[0] = 1;\r\n            let a = new globalvar.ImageData(data, 1, 1);\r\n            fillconstr = a.data[0] != 1;\r\n        }\r\n        catch (e) {\r\n            fillconstr = true;\r\n        }\r\n    }\r\n    if (fillconstr) {\r\n        var constr = function ImageDataShim() {\r\n            var i = 0;\r\n            var data = (arguments[i] instanceof Uint8ClampedArray ? arguments[i++] : null);\r\n            var width = arguments[i++];\r\n            var height = arguments[i++];\r\n            if (filltype) {\r\n                if (!data) {\r\n                    data = new Uint8ClampedArray(width * height * 4);\r\n                }\r\n                this.width = width;\r\n                this.height = height;\r\n                this.data = data;\r\n            }\r\n            else if (fillconstr) {\r\n                //WARNING This branch of code does not use the same pixel data backing store\r\n                //(problem with wasm, however all wasm browser have a native constructor (unless asm.js is used))\r\n                var canvas = document.createElement('canvas');\r\n                canvas.width = width;\r\n                canvas.height = height;\r\n                var ctx = canvas.getContext(\"2d\");\r\n                var imageData = ctx.createImageData(width, height);\r\n                if (data) {\r\n                    imageData.data.set(data);\r\n                }\r\n                return imageData;\r\n            }\r\n            // else {\r\n            // \t//oh no...\r\n            // \t//we need this monstrocity in order to call the native constructor with variable number of args\r\n            // \t//when es5 transpile is enable (that strips the spread operator)\r\n            // \treturn new (Function.prototype.bind.apply(oldconstr, [null,...arguments]));\r\n            // }\r\n        };\r\n        if (!filltype) {\r\n            constr.prototype = globalvar.ImageData.prototype;\r\n        }\r\n        globalvar.ImageData = constr;\r\n        ImageData = constr;\r\n    }\r\n    else {\r\n        ImageData = globalvar.ImageData;\r\n    }\r\n})();\r\n//Recast into a drawable imagedata class on all platforms, into a normal browser ImageData on browsers or a node-canvas imagedata on nodejs\r\nImageData.prototype.toDrawableData = function () {\r\n    if (typeof document == \"undefined\") {\r\n        return _nodepolyfill_js__WEBPACK_IMPORTED_MODULE_1__.imageDataToDrawable(this);\r\n    }\r\n    else {\r\n        return this;\r\n    }\r\n};\r\nImageData.prototype.putImageData = function (buf, cx, cy) {\r\n    for (var dx = 0; dx < buf.width; dx++) {\r\n        for (var dy = 0; dy < buf.height; dy++) {\r\n            var i1 = (dx + cx) * 4 + (dy + cy) * 4 * this.width;\r\n            var i2 = dx * 4 + dy * 4 * buf.width;\r\n            this.data[i1] = buf.data[i2];\r\n            this.data[i1 + 1] = buf.data[i2 + 1];\r\n            this.data[i1 + 2] = buf.data[i2 + 2];\r\n            this.data[i1 + 3] = buf.data[i2 + 3];\r\n        }\r\n    }\r\n};\r\nImageData.prototype.pixelOffset = function (x, y) {\r\n    return x * 4 + y * this.width * 4;\r\n};\r\n//creates a hash of a portion of the buffer used to check for changes\r\nImageData.prototype.getPixelHash = function (rect) {\r\n    if (!rect) {\r\n        rect = new _index_js__WEBPACK_IMPORTED_MODULE_0__.Rect(0, 0, this.width, this.height);\r\n    }\r\n    var hash = 0;\r\n    for (var x = rect.x; x < rect.x + rect.width; x++) {\r\n        for (var y = rect.y; y < rect.y + rect.height; y++) {\r\n            var i = x * 4 + y * 4 * this.width;\r\n            hash = (((hash << 5) - hash) + this.data[i]) | 0;\r\n            hash = (((hash << 5) - hash) + this.data[i + 1]) | 0;\r\n            hash = (((hash << 5) - hash) + this.data[i + 2]) | 0;\r\n            hash = (((hash << 5) - hash) + this.data[i + 3]) | 0;\r\n        }\r\n    }\r\n    return hash;\r\n};\r\nImageData.prototype.clone = function (rect) {\r\n    return this.toImage(rect).getContext(\"2d\").getImageData(0, 0, rect.width, rect.height);\r\n};\r\nImageData.prototype.show = function (x = 5, y = 5, zoom = 1) {\r\n    if (typeof document == \"undefined\") {\r\n        console.error(\"need a document to show an imagedata object\");\r\n        return;\r\n    }\r\n    var imgs = document.getElementsByClassName(\"debugimage\");\r\n    while (imgs.length > ImageData.prototype.show.maxImages) {\r\n        imgs[0].remove();\r\n    }\r\n    var el = this.toImage();\r\n    el.classList.add(\"debugimage\");\r\n    el.style.position = \"absolute\";\r\n    el.style.zIndex = \"1000\";\r\n    el.style.left = x / zoom + \"px\";\r\n    el.style.top = y / zoom + \"px\";\r\n    el.style.background = \"purple\";\r\n    el.style.cursor = \"pointer\";\r\n    el.style.imageRendering = \"pixelated\";\r\n    el.style.outline = \"1px solid #0f0\";\r\n    el.style.width = (this.width == 1 ? 100 : this.width) * zoom + \"px\";\r\n    el.style.height = (this.height == 1 ? 100 : this.height) * zoom + \"px\";\r\n    el.onclick = function () { el.remove(); };\r\n    document.body.appendChild(el);\r\n    return el;\r\n};\r\nImageData.prototype.show.maxImages = 10;\r\nImageData.prototype.toImage = function (rect) {\r\n    if (!rect) {\r\n        rect = new _index_js__WEBPACK_IMPORTED_MODULE_0__.Rect(0, 0, this.width, this.height);\r\n    }\r\n    if (typeof document != \"undefined\") {\r\n        var el = document.createElement(\"canvas\");\r\n        el.width = rect.width;\r\n        el.height = rect.height;\r\n    }\r\n    else {\r\n        el = _nodepolyfill_js__WEBPACK_IMPORTED_MODULE_1__.createCanvas(rect.width, rect.height);\r\n    }\r\n    var ctx = el.getContext(\"2d\");\r\n    ctx.putImageData(this.toDrawableData(), -rect.x, -rect.y);\r\n    return el;\r\n};\r\nImageData.prototype.getPixel = function (x, y) {\r\n    var i = x * 4 + y * 4 * this.width;\r\n    return [this.data[i], this.data[i + 1], this.data[i + 2], this.data[i + 3]];\r\n};\r\nImageData.prototype.getPixelValueSum = function (x, y) {\r\n    var i = x * 4 + y * 4 * this.width;\r\n    return this.data[i] + this.data[i + 1] + this.data[i + 2];\r\n};\r\nImageData.prototype.getPixelInt = function (x, y) {\r\n    var i = x * 4 + y * 4 * this.width;\r\n    return (this.data[i + 3] << 24) + (this.data[i + 0] << 16) + (this.data[i + 1] << 8) + (this.data[i + 2] << 0);\r\n};\r\nImageData.prototype.getColorDifference = function (x, y, r, g, b, a = 255) {\r\n    var i = x * 4 + y * 4 * this.width;\r\n    return Math.abs(this.data[i] - r) + Math.abs(this.data[i + 1] - g) + Math.abs(this.data[i + 2] - b) * a / 255;\r\n};\r\nImageData.prototype.setPixel = function (x, y, ...color) {\r\n    var r, g, b, a;\r\n    var [r, g, b, a] = (Array.isArray(color[0]) ? color[0] : color);\r\n    var i = x * 4 + y * 4 * this.width;\r\n    this.data[i] = r;\r\n    this.data[i + 1] = g;\r\n    this.data[i + 2] = b;\r\n    this.data[i + 3] = a == undefined ? 255 : a;\r\n};\r\nImageData.prototype.setPixelInt = function (x, y, color) {\r\n    var i = x * 4 + y * 4 * this.width;\r\n    this.data[i] = (color >> 24) & 0xff;\r\n    this.data[i + 1] = (color >> 16) & 0xff;\r\n    this.data[i + 2] = (color >> 8) & 0xff;\r\n    this.data[i + 3] = (color >> 0) & 0xff;\r\n};\r\nImageData.prototype.toFileBytes = function (format, quality) {\r\n    if (typeof HTMLCanvasElement != \"undefined\") {\r\n        return new Promise(d => this.toImage().toBlob(b => {\r\n            var r = new FileReader();\r\n            r.readAsArrayBuffer(b);\r\n            r.onload = () => d(new Uint8Array(r.result));\r\n        }, format, quality));\r\n    }\r\n    else {\r\n        return _nodepolyfill_js__WEBPACK_IMPORTED_MODULE_1__.imageDataToFileBytes(this, format, quality);\r\n    }\r\n};\r\nImageData.prototype.toPngBase64 = function () {\r\n    if (typeof HTMLCanvasElement != \"undefined\") {\r\n        var str = this.toImage().toDataURL(\"image/png\");\r\n        return str.slice(str.indexOf(\",\") + 1);\r\n    }\r\n    else {\r\n        throw new Error(\"synchronous image conversion not supported in nodejs, try using ImageData.prototype.toFileBytes\");\r\n    }\r\n};\r\nImageData.prototype.pixelCompare = function (buf, x = 0, y = 0, max) {\r\n    return _index_js__WEBPACK_IMPORTED_MODULE_0__.ImageDetect.simpleCompare(this, buf, x, y, max);\r\n};\r\nImageData.prototype.copyTo = function (target, sourcex, sourcey, width, height, targetx, targety) {\r\n    //convince v8 that these are 31bit uints\r\n    const targetwidth = target.width | 0;\r\n    const thiswidth = this.width | 0;\r\n    const copywidth = width | 0;\r\n    const fastwidth = Math.floor(width / 4) * 4;\r\n    const thisdata = new Int32Array(this.data.buffer, this.data.byteOffset, this.data.byteLength / 4);\r\n    const targetdata = new Int32Array(target.data.buffer, target.data.byteOffset, target.data.byteLength / 4);\r\n    for (let cy = 0; cy < height; cy++) {\r\n        let cx = 0;\r\n        let it = (cx + targetx) + (cy + targety) * targetwidth;\r\n        let is = (cx + sourcex) + (cy + sourcey) * thiswidth;\r\n        //copy 4 pixels per iter (xmm)\r\n        for (; cx < fastwidth; cx += 4) {\r\n            targetdata[it] = thisdata[is];\r\n            targetdata[it + 1] = thisdata[is + 1];\r\n            targetdata[it + 2] = thisdata[is + 2];\r\n            targetdata[it + 3] = thisdata[is + 3];\r\n            it += 4;\r\n            is += 4;\r\n        }\r\n        //copy remainder per pixel\r\n        for (; cx < copywidth; cx++) {\r\n            targetdata[it] = thisdata[is];\r\n            it += 1;\r\n            is += 1;\r\n        }\r\n    }\r\n};\r\nif (typeof HTMLImageElement != \"undefined\") {\r\n    HTMLImageElement.prototype.toBuffer = function (x = 0, y = 0, w = this.width, h = this.height) {\r\n        var cnv = document.createElement(\"canvas\");\r\n        cnv.width = w;\r\n        cnv.height = h;\r\n        var ctx = cnv.getContext(\"2d\");\r\n        ctx.drawImage(this, -x, -y);\r\n        return ctx.getImageData(0, 0, w, h);\r\n    };\r\n    HTMLImageElement.prototype.toCanvas = function (x = 0, y = 0, w = this.width, h = this.height) {\r\n        var cnv = document.createElement(\"canvas\");\r\n        cnv.width = w;\r\n        cnv.height = h;\r\n        var ctx = cnv.getContext(\"2d\");\r\n        ctx.drawImage(this, -x, -y);\r\n        return cnv;\r\n    };\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@alt1/base/dist/imagedata-extensions.js\n");

/***/ }),

/***/ "../node_modules/@alt1/base/dist/imagedetect.js":
/*!******************************************************!*\
  !*** ../node_modules/@alt1/base/dist/imagedetect.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"imageDataFromUrl\": () => (/* binding */ imageDataFromUrl),\n/* harmony export */   \"imageDataFromBase64\": () => (/* binding */ imageDataFromBase64),\n/* harmony export */   \"imageDataFromFileBuffer\": () => (/* binding */ imageDataFromFileBuffer),\n/* harmony export */   \"isPngBuffer\": () => (/* binding */ isPngBuffer),\n/* harmony export */   \"clearPngColorspace\": () => (/* binding */ clearPngColorspace),\n/* harmony export */   \"findSubimage\": () => (/* binding */ findSubimage),\n/* harmony export */   \"findSubbuffer\": () => (/* binding */ findSubbuffer),\n/* harmony export */   \"simpleCompare\": () => (/* binding */ simpleCompare),\n/* harmony export */   \"coldif\": () => (/* binding */ coldif),\n/* harmony export */   \"asyncMap\": () => (/* binding */ asyncMap),\n/* harmony export */   \"webpackImages\": () => (/* binding */ webpackImages),\n/* harmony export */   \"ImageDataSet\": () => (/* binding */ ImageDataSet)\n/* harmony export */ });\n/* harmony import */ var _imgref_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./imgref.js */ \"../node_modules/@alt1/base/dist/imgref.js\");\n/* harmony import */ var _wrapper_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./wrapper.js */ \"../node_modules/@alt1/base/dist/wrapper.js\");\n/* harmony import */ var _nodepolyfill_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./nodepolyfill.js */ \"../node_modules/@alt1/base/dist/nodepolyfill.js\");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./index.js */ \"../node_modules/@alt1/base/dist/index.js\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n/**\r\n* Downloads an image and returns the ImageData\r\n* Make sure the png image does not have a sRGB chunk or the resulting pixels will differ for different users!!!\r\n* @param url http(s) or data url to the image\r\n*/\r\nfunction imageDataFromUrl(url) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        if (typeof Image != \"undefined\") {\r\n            var img = new Image();\r\n            img.crossOrigin = \"crossorigin\";\r\n            return yield new Promise((done, fail) => {\r\n                img.onload = function () { done(img.toBuffer()); };\r\n                img.onerror = fail;\r\n                img.src = url;\r\n            });\r\n        }\r\n        else {\r\n            var hdr = \"data:image/png;base64,\";\r\n            if (url.startsWith(hdr)) {\r\n                return imageDataFromBase64(url.slice(hdr.length));\r\n            }\r\n            throw new Error(\"loading remote images in nodejs has been disabled, load the raw bytes and use imageDataFromNodeBuffer instead\");\r\n        }\r\n    });\r\n}\r\n/**\r\n* Loads an ImageData object from a base64 encoded png image\r\n* Make sure the png image does not have a sRGB chunk or the resulting pixels will differ for different users!!!\r\n* @param data a base64 encoded png image\r\n*/\r\nfunction imageDataFromBase64(data) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        if (typeof Image != \"undefined\") {\r\n            return imageDataFromUrl(\"data:image/png;base64,\" + data);\r\n        }\r\n        else {\r\n            return _nodepolyfill_js__WEBPACK_IMPORTED_MODULE_2__.imageDataFromBase64(data);\r\n        }\r\n    });\r\n}\r\n/**\r\n * Loads an ImageData object directly from a png encoded file buffer\r\n * This method ensures that png color space headers are taken care off\r\n * @param data The bytes of a png file\r\n */\r\nfunction imageDataFromFileBuffer(data) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        clearPngColorspace(data);\r\n        if (typeof Image != \"undefined\") {\r\n            let blob = new Blob([data], { type: \"image/png\" });\r\n            let url = URL.createObjectURL(blob);\r\n            let r = yield imageDataFromUrl(url);\r\n            URL.revokeObjectURL(url);\r\n            return r;\r\n        }\r\n        else {\r\n            return _nodepolyfill_js__WEBPACK_IMPORTED_MODULE_2__.imageDataFromBuffer(data);\r\n        }\r\n    });\r\n}\r\n/**\r\n* Checks if a given byte array is a png file (by checking for ?PNG as first 4 bytes)\r\n* @param bytes Raw bytes of the png file\r\n*/\r\nfunction isPngBuffer(bytes) {\r\n    return bytes[0] == 137 && bytes[1] == 80 && bytes[2] == 78 && bytes[3] == 71;\r\n}\r\n/**\r\n* Resets the colorspace data in the png file.\r\n* This makes sure the browser renders the exact colors in the file instead of filtering it in order to obtain the best real life representation of\r\n* what it looked like on the authors screen. (this feature is often broken and not supported)\r\n* For example a round trip printscreen -> open in browser results in different colors than the original\r\n* @param data Raw bytes of the png file\r\n*/\r\nfunction clearPngColorspace(data) {\r\n    if (!isPngBuffer(data)) {\r\n        throw new Error(\"non-png image received\");\r\n    }\r\n    var i = 8;\r\n    while (i < data.length) {\r\n        var length = data[i++] * 0x1000000 + data[i++] * 0x10000 + data[i++] * 0x100 + data[i++];\r\n        var ancillary = !!((data[i] >> 5) & 1);\r\n        var chunkname = String.fromCharCode(data[i], data[i + 1], data[i + 2], data[i + 3]);\r\n        var chunkid = chunkname.toLowerCase();\r\n        if (chunkid != \"trns\" && ancillary) {\r\n            data[i + 0] = \"n\".charCodeAt(0);\r\n            data[i + 1] = \"o\".charCodeAt(0);\r\n            data[i + 2] = \"P\".charCodeAt(0);\r\n            data[i + 3] = \"E\".charCodeAt(0);\r\n            //calculate new chunk checksum\r\n            //http://www.libpng.org/pub/png/spec/1.2/PNG-CRCAppendix.html\r\n            var end = i + 4 + length;\r\n            var crc = 0xffffffff;\r\n            //should be fast enough like this\r\n            var bitcrc = function (bit) {\r\n                for (var k = 0; k < 8; k++) {\r\n                    if (bit & 1) {\r\n                        bit = 0xedb88320 ^ (bit >>> 1);\r\n                    }\r\n                    else {\r\n                        bit = bit >>> 1;\r\n                    }\r\n                }\r\n                return bit;\r\n            };\r\n            for (var a = i; a < end; a++) {\r\n                if (a >= i + 4) {\r\n                    data[a] = 0;\r\n                }\r\n                var bit = data[a];\r\n                crc = bitcrc((crc ^ bit) & 0xff) ^ (crc >>> 8);\r\n            }\r\n            crc = crc ^ 0xffffffff;\r\n            //new chunk checksum\r\n            data[i + 4 + length + 0] = (crc >> 24) & 0xff;\r\n            data[i + 4 + length + 1] = (crc >> 16) & 0xff;\r\n            data[i + 4 + length + 2] = (crc >> 8) & 0xff;\r\n            data[i + 4 + length + 3] = (crc >> 0) & 0xff;\r\n        }\r\n        if (chunkname == \"IEND\") {\r\n            break;\r\n        }\r\n        i += 4; //type\r\n        i += length; //data\r\n        i += 4; //crc\r\n    }\r\n}\r\n/**\r\n* finds the given needle ImageBuffer in the given haystack ImgRef this function uses the best optimized available\r\n* code depending on the type of the haystack. It will use fast c# searching if the haystack is an ImgRefBind, js searching\r\n* is used otherwise.\r\n* the checklist argument is no longer used and should ignored or null/undefined\r\n* The optional sx,sy,sw,sh arguments indicate a bounding rectangle in which to search the needle. The rectangle should be bigger than the needle\r\n* @returns An array of points where the needle is found. The array is empty if none are found\r\n*/\r\nfunction findSubimage(haystackImgref, needleBuffer, sx = 0, sy = 0, sw = haystackImgref.width, sh = haystackImgref.height) {\r\n    if (!haystackImgref) {\r\n        throw new TypeError();\r\n    }\r\n    if (!needleBuffer) {\r\n        throw new TypeError();\r\n    }\r\n    var max = 30;\r\n    //check if we can do this in alt1\r\n    if (haystackImgref instanceof _imgref_js__WEBPACK_IMPORTED_MODULE_0__.ImgRefBind && _wrapper_js__WEBPACK_IMPORTED_MODULE_1__.hasAlt1 && alt1.bindFindSubImg) {\r\n        var needlestr = _wrapper_js__WEBPACK_IMPORTED_MODULE_1__.encodeImageString(needleBuffer);\r\n        var r = alt1.bindFindSubImg(haystackImgref.handle, needlestr, needleBuffer.width, sx, sy, sw, sh);\r\n        if (!r) {\r\n            throw new _wrapper_js__WEBPACK_IMPORTED_MODULE_1__.Alt1Error();\r\n        }\r\n        return JSON.parse(r);\r\n    }\r\n    return findSubbuffer(haystackImgref.read(), needleBuffer, sx, sy, sw, sh);\r\n}\r\n/**\r\n* Uses js to find the given needle ImageBuffer in the given haystack ImageBuffer. It is better to use the alt1.bind- functions in\r\n* combination with a1nxt.findsubimg.\r\n* the optional sx,sy,sw,sh arguments indicate a bounding rectangle in which to search.\r\n* @returns An array of points where the needle is found. The array is empty if none are found\r\n*/\r\nfunction findSubbuffer(haystack, needle, sx = 0, sy = 0, sw = haystack.width, sh = haystack.height) {\r\n    var r = [];\r\n    var maxdif = 30;\r\n    var maxresults = 50;\r\n    var needlestride = needle.width * 4;\r\n    var heystackstride = haystack.width * 4;\r\n    //built list of non trans pixel to check\r\n    var checkList = [];\r\n    for (var y = 0; y < needle.height; y++) {\r\n        for (var x = 0; x < needle.width; x++) {\r\n            var i = x * 4 + y * needlestride;\r\n            if (needle.data[i + 3] == 255) {\r\n                checkList.push({ x: x, y: y });\r\n            }\r\n            if (checkList.length == 10) {\r\n                break;\r\n            }\r\n        }\r\n        if (checkList.length == 10) {\r\n            break;\r\n        }\r\n    }\r\n    var cw = (sx + sw) - needle.width;\r\n    var ch = (sy + sh) - needle.height;\r\n    var checklength = checkList.length;\r\n    for (var y = sy; y <= ch; y++) {\r\n        outer: for (var x = sx; x <= cw; x++) {\r\n            for (var a = 0; a < checklength; a++) {\r\n                var i1 = (x + checkList[a].x) * 4 + (y + checkList[a].y) * heystackstride;\r\n                var i2 = checkList[a].x * 4 + checkList[a].y * needlestride;\r\n                var d = 0;\r\n                d = d + Math.abs(haystack.data[i1 + 0] - needle.data[i2 + 0]) | 0;\r\n                d = d + Math.abs(haystack.data[i1 + 1] - needle.data[i2 + 1]) | 0;\r\n                d = d + Math.abs(haystack.data[i1 + 2] - needle.data[i2 + 2]) | 0;\r\n                d *= 255 / needle.data[i2 + 3];\r\n                if (d > maxdif) {\r\n                    continue outer;\r\n                }\r\n            }\r\n            if (simpleCompare(haystack, needle, x, y, maxdif) != Infinity) {\r\n                r.push({ x, y });\r\n                if (r.length > maxresults) {\r\n                    return r;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return r;\r\n}\r\n/**\r\n* Compares two images and returns the average color difference per pixel between them\r\n* @param max The max color difference at any point in the image before short circuiting the function and returning Infinity. set to -1 to always continue.\r\n* @returns The average color difference per pixel or Infinity if the difference is more than max at any point in the image\r\n*/\r\nfunction simpleCompare(bigbuf, checkbuf, x, y, max = 30) {\r\n    if (x < 0 || y < 0) {\r\n        throw new RangeError();\r\n    }\r\n    if (x + checkbuf.width > bigbuf.width || y + checkbuf.height > bigbuf.height) {\r\n        throw new RangeError();\r\n    }\r\n    if (max == -1) {\r\n        max = 255 * 4;\r\n    }\r\n    var dif = 0;\r\n    for (var step = 8; step >= 1; step /= 2) {\r\n        for (var cx = 0; cx < checkbuf.width; cx += step) {\r\n            for (var cy = 0; cy < checkbuf.height; cy += step) {\r\n                var i1 = (x + cx) * 4 + (y + cy) * bigbuf.width * 4;\r\n                var i2 = cx * 4 + cy * checkbuf.width * 4;\r\n                var d = 0;\r\n                d = d + Math.abs(bigbuf.data[i1 + 0] - checkbuf.data[i2 + 0]) | 0;\r\n                d = d + Math.abs(bigbuf.data[i1 + 1] - checkbuf.data[i2 + 1]) | 0;\r\n                d = d + Math.abs(bigbuf.data[i1 + 2] - checkbuf.data[i2 + 2]) | 0;\r\n                d *= checkbuf.data[i2 + 3] / 255;\r\n                if (step == 1) {\r\n                    dif += d;\r\n                }\r\n                if (d > max) {\r\n                    return Infinity;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return dif / checkbuf.width / checkbuf.height;\r\n}\r\n/**\r\n* Returns the difference between two colors (scaled to the alpha of the second color)\r\n*/\r\nfunction coldif(r1, g1, b1, r2, g2, b2, a2) {\r\n    return (Math.abs(r1 - r2) + Math.abs(g1 - g2) + Math.abs(b1 - b2)) * a2 / 255; //only applies alpha for 2nd buffer!\r\n}\r\n/**\r\n * Turns map of promises into a map that contains the resolved values after loading.\r\n * @param input\r\n */\r\nfunction asyncMap(input) {\r\n    var raw = {};\r\n    var promises = [];\r\n    for (var a in input) {\r\n        if (input.hasOwnProperty(a)) {\r\n            raw[a] = null;\r\n            promises.push(input[a].then(function (a, i) { raw[a] = i; r[a] = i; }.bind(null, a)));\r\n        }\r\n    }\r\n    var r = {};\r\n    var promise = Promise.all(promises).then(() => { r.loaded = true; return r; });\r\n    Object.defineProperty(r, \"loaded\", { enumerable: false, value: false, writable: true });\r\n    Object.defineProperty(r, \"promise\", { enumerable: false, value: promise });\r\n    Object.defineProperty(r, \"raw\", { enumerable: false, value: raw });\r\n    return Object.assign(r, raw);\r\n}\r\n/**\r\n* Same as asyncMap, but casts the properties to ImageData in typescript\r\n*/\r\nfunction webpackImages(input) {\r\n    return asyncMap(input);\r\n}\r\nclass ImageDataSet {\r\n    constructor() {\r\n        this.buffers = [];\r\n    }\r\n    matchBest(img, x, y, max) {\r\n        let best = null;\r\n        let bestscore = max;\r\n        for (let a = 0; a < this.buffers.length; a++) {\r\n            let score = img.pixelCompare(this.buffers[a], x, y, bestscore);\r\n            if (isFinite(score) && (bestscore == undefined || score < bestscore)) {\r\n                bestscore = score;\r\n                best = a;\r\n            }\r\n        }\r\n        if (best == null) {\r\n            return null;\r\n        }\r\n        return { index: best, score: bestscore };\r\n    }\r\n    static fromFilmStrip(baseimg, width) {\r\n        if ((baseimg.width % width) != 0) {\r\n            throw new Error(\"slice size does not fit in base img\");\r\n        }\r\n        let r = new ImageDataSet();\r\n        for (let x = 0; x < baseimg.width; x += width) {\r\n            r.buffers.push(baseimg.clone(new _index_js__WEBPACK_IMPORTED_MODULE_3__.Rect(x, 0, width, baseimg.height)));\r\n        }\r\n        return r;\r\n    }\r\n    static fromFilmStripUneven(baseimg, widths) {\r\n        let r = new ImageDataSet();\r\n        let x = 0;\r\n        for (let w of widths) {\r\n            r.buffers.push(baseimg.clone(new _index_js__WEBPACK_IMPORTED_MODULE_3__.Rect(x, 0, w, baseimg.height)));\r\n            x += w;\r\n            if (x > baseimg.width) {\r\n                throw new Error(\"sampling filmstrip outside bounds\");\r\n            }\r\n        }\r\n        if (x != baseimg.width) {\r\n            throw new Error(\"unconsumed pixels left in film strip imagedata\");\r\n        }\r\n        return r;\r\n    }\r\n    static fromAtlas(baseimg, slices) {\r\n        let r = new ImageDataSet();\r\n        for (let slice of slices) {\r\n            r.buffers.push(baseimg.clone(slice));\r\n        }\r\n        return r;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@alt1/base/dist/imagedetect.js\n");

/***/ }),

/***/ "../node_modules/@alt1/base/dist/imgref.js":
/*!*************************************************!*\
  !*** ../node_modules/@alt1/base/dist/imgref.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ImgRef\": () => (/* binding */ ImgRef),\n/* harmony export */   \"ImgRefCtx\": () => (/* binding */ ImgRefCtx),\n/* harmony export */   \"ImgRefBind\": () => (/* binding */ ImgRefBind),\n/* harmony export */   \"ImgRefData\": () => (/* binding */ ImgRefData)\n/* harmony export */ });\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.js */ \"../node_modules/@alt1/base/dist/index.js\");\n\r\n/**\r\n * Represents an image that might be in different types of memory\r\n * This is mostly used to represent images still in Alt1 memory that have\r\n * not been transfered to js yet. Various a1lib api's use this type and\r\n * choose the most efficient approach based on the memory type\r\n */\r\nclass ImgRef {\r\n    constructor(x, y, w, h) {\r\n        this.t = \"none\";\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = w;\r\n        this.height = h;\r\n    }\r\n    read(x = 0, y = 0, w = this.width, h = this.height) {\r\n        throw new Error(\"This imgref (\" + this.t + \") does not support toData\");\r\n    }\r\n    findSubimage(needle, sx = 0, sy = 0, w = this.width, h = this.height) {\r\n        return _index_js__WEBPACK_IMPORTED_MODULE_0__.ImageDetect.findSubimage(this, needle, sx, sy, w, h);\r\n    }\r\n    toData(x = this.x, y = this.y, w = this.width, h = this.height) {\r\n        return this.read(x - this.x, y - this.y, w, h);\r\n    }\r\n    ;\r\n    containsArea(rect) {\r\n        return this.x <= rect.x && this.y <= rect.y && this.x + this.width >= rect.x + rect.width && this.y + this.height >= rect.y + rect.height;\r\n    }\r\n}\r\n/**\r\n * Represents an image in js render memory (canvas/image tag)\r\n */\r\nclass ImgRefCtx extends ImgRef {\r\n    constructor(img, x = 0, y = 0) {\r\n        if (img instanceof CanvasRenderingContext2D) {\r\n            super(x, y, img.canvas.width, img.canvas.height);\r\n            this.ctx = img;\r\n        }\r\n        else {\r\n            super(x, y, img.width, img.height);\r\n            var cnv = (img instanceof HTMLCanvasElement ? img : img.toCanvas());\r\n            this.ctx = cnv.getContext(\"2d\");\r\n        }\r\n        this.t = \"ctx\";\r\n    }\r\n    read(x = 0, y = 0, w = this.width, h = this.height) {\r\n        return this.ctx.getImageData(x, y, w, h);\r\n    }\r\n}\r\n/**\r\n * Represents in image in Alt1 memory, This type of image can be searched for subimages\r\n * very efficiently and transfering the full image to js can be avoided this way\r\n */\r\nclass ImgRefBind extends ImgRef {\r\n    constructor(handle, x = 0, y = 0, w = 0, h = 0) {\r\n        super(x, y, w, h);\r\n        this.handle = handle;\r\n        this.t = \"bind\";\r\n    }\r\n    read(x = 0, y = 0, w = this.width, h = this.height) {\r\n        return (0,_index_js__WEBPACK_IMPORTED_MODULE_0__.transferImageData)(this.handle, x, y, w, h);\r\n    }\r\n}\r\n/**\r\n * Represents an image in js memory\r\n */\r\nclass ImgRefData extends ImgRef {\r\n    constructor(buf, x = 0, y = 0) {\r\n        super(x, y, buf.width, buf.height);\r\n        this.buf = buf;\r\n        this.t = \"data\";\r\n    }\r\n    read(x = 0, y = 0, w = this.width, h = this.height) {\r\n        if (x == 0 && y == 0 && w == this.width && h == this.height) {\r\n            return this.buf;\r\n        }\r\n        var r = new ImageData(w, h);\r\n        for (var b = y; b < y + h; b++) {\r\n            for (var a = x; a < x + w; a++) {\r\n                var i1 = (a - x) * 4 + (b - y) * w * 4;\r\n                var i2 = a * 4 + b * 4 * this.buf.width;\r\n                r.data[i1] = this.buf.data[i2];\r\n                r.data[i1 + 1] = this.buf.data[i2 + 1];\r\n                r.data[i1 + 2] = this.buf.data[i2 + 2];\r\n                r.data[i1 + 3] = this.buf.data[i2 + 3];\r\n            }\r\n        }\r\n        return r;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BhbHQxL2Jhc2UvZGlzdC9pbWdyZWYuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBNEQ7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSwrREFBd0I7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLDREQUFpQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixXQUFXO0FBQ25DLDRCQUE0QixXQUFXO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9URVNULy4uL25vZGVfbW9kdWxlcy9AYWx0MS9iYXNlL2Rpc3QvaW1ncmVmLmpzPzY4MTkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW1hZ2VEZXRlY3QsIHRyYW5zZmVySW1hZ2VEYXRhIH0gZnJvbSBcIi4vaW5kZXguanNcIjtcclxuLyoqXHJcbiAqIFJlcHJlc2VudHMgYW4gaW1hZ2UgdGhhdCBtaWdodCBiZSBpbiBkaWZmZXJlbnQgdHlwZXMgb2YgbWVtb3J5XHJcbiAqIFRoaXMgaXMgbW9zdGx5IHVzZWQgdG8gcmVwcmVzZW50IGltYWdlcyBzdGlsbCBpbiBBbHQxIG1lbW9yeSB0aGF0IGhhdmVcclxuICogbm90IGJlZW4gdHJhbnNmZXJlZCB0byBqcyB5ZXQuIFZhcmlvdXMgYTFsaWIgYXBpJ3MgdXNlIHRoaXMgdHlwZSBhbmRcclxuICogY2hvb3NlIHRoZSBtb3N0IGVmZmljaWVudCBhcHByb2FjaCBiYXNlZCBvbiB0aGUgbWVtb3J5IHR5cGVcclxuICovXHJcbmV4cG9ydCBjbGFzcyBJbWdSZWYge1xyXG4gICAgY29uc3RydWN0b3IoeCwgeSwgdywgaCkge1xyXG4gICAgICAgIHRoaXMudCA9IFwibm9uZVwiO1xyXG4gICAgICAgIHRoaXMueCA9IHg7XHJcbiAgICAgICAgdGhpcy55ID0geTtcclxuICAgICAgICB0aGlzLndpZHRoID0gdztcclxuICAgICAgICB0aGlzLmhlaWdodCA9IGg7XHJcbiAgICB9XHJcbiAgICByZWFkKHggPSAwLCB5ID0gMCwgdyA9IHRoaXMud2lkdGgsIGggPSB0aGlzLmhlaWdodCkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgaW1ncmVmIChcIiArIHRoaXMudCArIFwiKSBkb2VzIG5vdCBzdXBwb3J0IHRvRGF0YVwiKTtcclxuICAgIH1cclxuICAgIGZpbmRTdWJpbWFnZShuZWVkbGUsIHN4ID0gMCwgc3kgPSAwLCB3ID0gdGhpcy53aWR0aCwgaCA9IHRoaXMuaGVpZ2h0KSB7XHJcbiAgICAgICAgcmV0dXJuIEltYWdlRGV0ZWN0LmZpbmRTdWJpbWFnZSh0aGlzLCBuZWVkbGUsIHN4LCBzeSwgdywgaCk7XHJcbiAgICB9XHJcbiAgICB0b0RhdGEoeCA9IHRoaXMueCwgeSA9IHRoaXMueSwgdyA9IHRoaXMud2lkdGgsIGggPSB0aGlzLmhlaWdodCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJlYWQoeCAtIHRoaXMueCwgeSAtIHRoaXMueSwgdywgaCk7XHJcbiAgICB9XHJcbiAgICA7XHJcbiAgICBjb250YWluc0FyZWEocmVjdCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnggPD0gcmVjdC54ICYmIHRoaXMueSA8PSByZWN0LnkgJiYgdGhpcy54ICsgdGhpcy53aWR0aCA+PSByZWN0LnggKyByZWN0LndpZHRoICYmIHRoaXMueSArIHRoaXMuaGVpZ2h0ID49IHJlY3QueSArIHJlY3QuaGVpZ2h0O1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBSZXByZXNlbnRzIGFuIGltYWdlIGluIGpzIHJlbmRlciBtZW1vcnkgKGNhbnZhcy9pbWFnZSB0YWcpXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgSW1nUmVmQ3R4IGV4dGVuZHMgSW1nUmVmIHtcclxuICAgIGNvbnN0cnVjdG9yKGltZywgeCA9IDAsIHkgPSAwKSB7XHJcbiAgICAgICAgaWYgKGltZyBpbnN0YW5jZW9mIENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCkge1xyXG4gICAgICAgICAgICBzdXBlcih4LCB5LCBpbWcuY2FudmFzLndpZHRoLCBpbWcuY2FudmFzLmhlaWdodCk7XHJcbiAgICAgICAgICAgIHRoaXMuY3R4ID0gaW1nO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgc3VwZXIoeCwgeSwgaW1nLndpZHRoLCBpbWcuaGVpZ2h0KTtcclxuICAgICAgICAgICAgdmFyIGNudiA9IChpbWcgaW5zdGFuY2VvZiBIVE1MQ2FudmFzRWxlbWVudCA/IGltZyA6IGltZy50b0NhbnZhcygpKTtcclxuICAgICAgICAgICAgdGhpcy5jdHggPSBjbnYuZ2V0Q29udGV4dChcIjJkXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnQgPSBcImN0eFwiO1xyXG4gICAgfVxyXG4gICAgcmVhZCh4ID0gMCwgeSA9IDAsIHcgPSB0aGlzLndpZHRoLCBoID0gdGhpcy5oZWlnaHQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jdHguZ2V0SW1hZ2VEYXRhKHgsIHksIHcsIGgpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBSZXByZXNlbnRzIGluIGltYWdlIGluIEFsdDEgbWVtb3J5LCBUaGlzIHR5cGUgb2YgaW1hZ2UgY2FuIGJlIHNlYXJjaGVkIGZvciBzdWJpbWFnZXNcclxuICogdmVyeSBlZmZpY2llbnRseSBhbmQgdHJhbnNmZXJpbmcgdGhlIGZ1bGwgaW1hZ2UgdG8ganMgY2FuIGJlIGF2b2lkZWQgdGhpcyB3YXlcclxuICovXHJcbmV4cG9ydCBjbGFzcyBJbWdSZWZCaW5kIGV4dGVuZHMgSW1nUmVmIHtcclxuICAgIGNvbnN0cnVjdG9yKGhhbmRsZSwgeCA9IDAsIHkgPSAwLCB3ID0gMCwgaCA9IDApIHtcclxuICAgICAgICBzdXBlcih4LCB5LCB3LCBoKTtcclxuICAgICAgICB0aGlzLmhhbmRsZSA9IGhhbmRsZTtcclxuICAgICAgICB0aGlzLnQgPSBcImJpbmRcIjtcclxuICAgIH1cclxuICAgIHJlYWQoeCA9IDAsIHkgPSAwLCB3ID0gdGhpcy53aWR0aCwgaCA9IHRoaXMuaGVpZ2h0KSB7XHJcbiAgICAgICAgcmV0dXJuIHRyYW5zZmVySW1hZ2VEYXRhKHRoaXMuaGFuZGxlLCB4LCB5LCB3LCBoKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogUmVwcmVzZW50cyBhbiBpbWFnZSBpbiBqcyBtZW1vcnlcclxuICovXHJcbmV4cG9ydCBjbGFzcyBJbWdSZWZEYXRhIGV4dGVuZHMgSW1nUmVmIHtcclxuICAgIGNvbnN0cnVjdG9yKGJ1ZiwgeCA9IDAsIHkgPSAwKSB7XHJcbiAgICAgICAgc3VwZXIoeCwgeSwgYnVmLndpZHRoLCBidWYuaGVpZ2h0KTtcclxuICAgICAgICB0aGlzLmJ1ZiA9IGJ1ZjtcclxuICAgICAgICB0aGlzLnQgPSBcImRhdGFcIjtcclxuICAgIH1cclxuICAgIHJlYWQoeCA9IDAsIHkgPSAwLCB3ID0gdGhpcy53aWR0aCwgaCA9IHRoaXMuaGVpZ2h0KSB7XHJcbiAgICAgICAgaWYgKHggPT0gMCAmJiB5ID09IDAgJiYgdyA9PSB0aGlzLndpZHRoICYmIGggPT0gdGhpcy5oZWlnaHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYnVmO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgciA9IG5ldyBJbWFnZURhdGEodywgaCk7XHJcbiAgICAgICAgZm9yICh2YXIgYiA9IHk7IGIgPCB5ICsgaDsgYisrKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGEgPSB4OyBhIDwgeCArIHc7IGErKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGkxID0gKGEgLSB4KSAqIDQgKyAoYiAtIHkpICogdyAqIDQ7XHJcbiAgICAgICAgICAgICAgICB2YXIgaTIgPSBhICogNCArIGIgKiA0ICogdGhpcy5idWYud2lkdGg7XHJcbiAgICAgICAgICAgICAgICByLmRhdGFbaTFdID0gdGhpcy5idWYuZGF0YVtpMl07XHJcbiAgICAgICAgICAgICAgICByLmRhdGFbaTEgKyAxXSA9IHRoaXMuYnVmLmRhdGFbaTIgKyAxXTtcclxuICAgICAgICAgICAgICAgIHIuZGF0YVtpMSArIDJdID0gdGhpcy5idWYuZGF0YVtpMiArIDJdO1xyXG4gICAgICAgICAgICAgICAgci5kYXRhW2kxICsgM10gPSB0aGlzLmJ1Zi5kYXRhW2kyICsgM107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHI7XHJcbiAgICB9XHJcbn1cclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../node_modules/@alt1/base/dist/imgref.js\n");

/***/ }),

/***/ "../node_modules/@alt1/base/dist/index.js":
/*!************************************************!*\
  !*** ../node_modules/@alt1/base/dist/index.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ImageDetect\": () => (/* reexport module object */ _imagedetect_js__WEBPACK_IMPORTED_MODULE_1__),\n/* harmony export */   \"PasteInput\": () => (/* reexport module object */ _pasteinput_js__WEBPACK_IMPORTED_MODULE_2__),\n/* harmony export */   \"Rect\": () => (/* reexport safe */ _rect_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]),\n/* harmony export */   \"ImageData\": () => (/* reexport safe */ _imagedata_extensions_js__WEBPACK_IMPORTED_MODULE_4__.ImageData),\n/* harmony export */   \"NodePolyfill\": () => (/* reexport module object */ _nodepolyfill_js__WEBPACK_IMPORTED_MODULE_5__),\n/* harmony export */   \"ImgRef\": () => (/* reexport safe */ _imgref_js__WEBPACK_IMPORTED_MODULE_6__.ImgRef),\n/* harmony export */   \"ImgRefBind\": () => (/* reexport safe */ _imgref_js__WEBPACK_IMPORTED_MODULE_6__.ImgRefBind),\n/* harmony export */   \"ImgRefCtx\": () => (/* reexport safe */ _imgref_js__WEBPACK_IMPORTED_MODULE_6__.ImgRefCtx),\n/* harmony export */   \"ImgRefData\": () => (/* reexport safe */ _imgref_js__WEBPACK_IMPORTED_MODULE_6__.ImgRefData),\n/* harmony export */   \"Alt1Error\": () => (/* reexport safe */ _wrapper_js__WEBPACK_IMPORTED_MODULE_7__.Alt1Error),\n/* harmony export */   \"ImageStreamReader\": () => (/* reexport safe */ _wrapper_js__WEBPACK_IMPORTED_MODULE_7__.ImageStreamReader),\n/* harmony export */   \"NoAlt1Error\": () => (/* reexport safe */ _wrapper_js__WEBPACK_IMPORTED_MODULE_7__.NoAlt1Error),\n/* harmony export */   \"addResizeElement\": () => (/* reexport safe */ _wrapper_js__WEBPACK_IMPORTED_MODULE_7__.addResizeElement),\n/* harmony export */   \"capture\": () => (/* reexport safe */ _wrapper_js__WEBPACK_IMPORTED_MODULE_7__.capture),\n/* harmony export */   \"captureAsync\": () => (/* reexport safe */ _wrapper_js__WEBPACK_IMPORTED_MODULE_7__.captureAsync),\n/* harmony export */   \"captureHold\": () => (/* reexport safe */ _wrapper_js__WEBPACK_IMPORTED_MODULE_7__.captureHold),\n/* harmony export */   \"captureHoldFullRs\": () => (/* reexport safe */ _wrapper_js__WEBPACK_IMPORTED_MODULE_7__.captureHoldFullRs),\n/* harmony export */   \"captureHoldScreen\": () => (/* reexport safe */ _wrapper_js__WEBPACK_IMPORTED_MODULE_7__.captureHoldScreen),\n/* harmony export */   \"captureMultiAsync\": () => (/* reexport safe */ _wrapper_js__WEBPACK_IMPORTED_MODULE_7__.captureMultiAsync),\n/* harmony export */   \"captureStream\": () => (/* reexport safe */ _wrapper_js__WEBPACK_IMPORTED_MODULE_7__.captureStream),\n/* harmony export */   \"decodeImageString\": () => (/* reexport safe */ _wrapper_js__WEBPACK_IMPORTED_MODULE_7__.decodeImageString),\n/* harmony export */   \"encodeImageString\": () => (/* reexport safe */ _wrapper_js__WEBPACK_IMPORTED_MODULE_7__.encodeImageString),\n/* harmony export */   \"getMousePosition\": () => (/* reexport safe */ _wrapper_js__WEBPACK_IMPORTED_MODULE_7__.getMousePosition),\n/* harmony export */   \"getdisplaybounds\": () => (/* reexport safe */ _wrapper_js__WEBPACK_IMPORTED_MODULE_7__.getdisplaybounds),\n/* harmony export */   \"hasAlt1\": () => (/* reexport safe */ _wrapper_js__WEBPACK_IMPORTED_MODULE_7__.hasAlt1),\n/* harmony export */   \"hasAlt1Version\": () => (/* reexport safe */ _wrapper_js__WEBPACK_IMPORTED_MODULE_7__.hasAlt1Version),\n/* harmony export */   \"identifyApp\": () => (/* reexport safe */ _wrapper_js__WEBPACK_IMPORTED_MODULE_7__.identifyApp),\n/* harmony export */   \"mixColor\": () => (/* reexport safe */ _wrapper_js__WEBPACK_IMPORTED_MODULE_7__.mixColor),\n/* harmony export */   \"newestversion\": () => (/* reexport safe */ _wrapper_js__WEBPACK_IMPORTED_MODULE_7__.newestversion),\n/* harmony export */   \"on\": () => (/* reexport safe */ _wrapper_js__WEBPACK_IMPORTED_MODULE_7__.on),\n/* harmony export */   \"once\": () => (/* reexport safe */ _wrapper_js__WEBPACK_IMPORTED_MODULE_7__.once),\n/* harmony export */   \"openbrowser\": () => (/* reexport safe */ _wrapper_js__WEBPACK_IMPORTED_MODULE_7__.openbrowser),\n/* harmony export */   \"removeListener\": () => (/* reexport safe */ _wrapper_js__WEBPACK_IMPORTED_MODULE_7__.removeListener),\n/* harmony export */   \"requireAlt1\": () => (/* reexport safe */ _wrapper_js__WEBPACK_IMPORTED_MODULE_7__.requireAlt1),\n/* harmony export */   \"resetEnvironment\": () => (/* reexport safe */ _wrapper_js__WEBPACK_IMPORTED_MODULE_7__.resetEnvironment),\n/* harmony export */   \"skinName\": () => (/* reexport safe */ _wrapper_js__WEBPACK_IMPORTED_MODULE_7__.skinName),\n/* harmony export */   \"transferImageData\": () => (/* reexport safe */ _wrapper_js__WEBPACK_IMPORTED_MODULE_7__.transferImageData),\n/* harmony export */   \"unmixColor\": () => (/* reexport safe */ _wrapper_js__WEBPACK_IMPORTED_MODULE_7__.unmixColor)\n/* harmony export */ });\n/* harmony import */ var _declarations_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./declarations.js */ \"../node_modules/@alt1/base/dist/declarations.js\");\n/* harmony import */ var _declarations_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_declarations_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _imagedetect_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./imagedetect.js */ \"../node_modules/@alt1/base/dist/imagedetect.js\");\n/* harmony import */ var _pasteinput_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pasteinput.js */ \"../node_modules/@alt1/base/dist/pasteinput.js\");\n/* harmony import */ var _rect_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./rect.js */ \"../node_modules/@alt1/base/dist/rect.js\");\n/* harmony import */ var _imagedata_extensions_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./imagedata-extensions.js */ \"../node_modules/@alt1/base/dist/imagedata-extensions.js\");\n/* harmony import */ var _nodepolyfill_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./nodepolyfill.js */ \"../node_modules/@alt1/base/dist/nodepolyfill.js\");\n/* harmony import */ var _imgref_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./imgref.js */ \"../node_modules/@alt1/base/dist/imgref.js\");\n/* harmony import */ var _wrapper_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./wrapper.js */ \"../node_modules/@alt1/base/dist/wrapper.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BhbHQxL2Jhc2UvZGlzdC9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUEyQjtBQUNxQjtBQUNGO0FBQ0Y7QUFDVTtBQUNKO0FBQ3RCO0FBQ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9URVNULy4uL25vZGVfbW9kdWxlcy9AYWx0MS9iYXNlL2Rpc3QvaW5kZXguanM/YjVjOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXCIuL2RlY2xhcmF0aW9ucy5qc1wiO1xyXG5leHBvcnQgKiBhcyBJbWFnZURldGVjdCBmcm9tIFwiLi9pbWFnZWRldGVjdC5qc1wiO1xyXG5leHBvcnQgKiBhcyBQYXN0ZUlucHV0IGZyb20gXCIuL3Bhc3RlaW5wdXQuanNcIjtcclxuZXhwb3J0IHsgZGVmYXVsdCBhcyBSZWN0IH0gZnJvbSBcIi4vcmVjdC5qc1wiO1xyXG5leHBvcnQgeyBJbWFnZURhdGEgfSBmcm9tIFwiLi9pbWFnZWRhdGEtZXh0ZW5zaW9ucy5qc1wiO1xyXG5leHBvcnQgKiBhcyBOb2RlUG9seWZpbGwgZnJvbSBcIi4vbm9kZXBvbHlmaWxsLmpzXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL2ltZ3JlZi5qc1wiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi93cmFwcGVyLmpzXCI7XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/@alt1/base/dist/index.js\n");

/***/ }),

/***/ "../node_modules/@alt1/base/dist/nodepolyfill.js":
/*!*******************************************************!*\
  !*** ../node_modules/@alt1/base/dist/nodepolyfill.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"polyfillRequire\": () => (/* binding */ polyfillRequire),\n/* harmony export */   \"requireSharp\": () => (/* binding */ requireSharp),\n/* harmony export */   \"requireNodeCanvas\": () => (/* binding */ requireNodeCanvas),\n/* harmony export */   \"requireElectronCommon\": () => (/* binding */ requireElectronCommon),\n/* harmony export */   \"imageDataToDrawable\": () => (/* binding */ imageDataToDrawable),\n/* harmony export */   \"createCanvas\": () => (/* binding */ createCanvas),\n/* harmony export */   \"imageDataToFileBytes\": () => (/* binding */ imageDataToFileBytes),\n/* harmony export */   \"imageDataFromBase64\": () => (/* binding */ imageDataFromBase64),\n/* harmony export */   \"imageDataFromBuffer\": () => (/* binding */ imageDataFromBuffer)\n/* harmony export */ });\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.js */ \"../node_modules/@alt1/base/dist/index.js\");\n/* harmony import */ var _imagedetect_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./imagedetect.js */ \"../node_modules/@alt1/base/dist/imagedetect.js\");\n//nodejs and electron polyfills for web api's\r\n//commented out type info as that breaks webpack with optional dependencies\r\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\nvar requirefunction = null;\r\n/**\r\n * Call this function to let the libs require extra dependencies on nodejs in order\r\n * to polyfill some browser api's (mostly image compression/decompression)\r\n * `NodePolifill.polyfillRequire(require);` should solve most cases\r\n */\r\nfunction polyfillRequire(requirefn) {\r\n    requirefunction = requirefn;\r\n}\r\nfunction requireSharp() {\r\n    try {\r\n        if (requirefunction) {\r\n            return requirefunction(\"sharp\");\r\n        }\r\n        else {\r\n            return require(/* webpackIgnore: true */ \"sharp\"); // as typeof import(\"sharp\");\r\n        }\r\n    }\r\n    catch (e) { }\r\n    return null;\r\n}\r\nfunction requireNodeCanvas() {\r\n    //attempt to require sharp first, after loading canvas the module sharp fails to load\r\n    requireSharp();\r\n    try {\r\n        if (requirefunction) {\r\n            return requirefunction(\"canvas\");\r\n        }\r\n        else {\r\n            return require(/* webpackIgnore: true */ \"canvas\"); // as typeof import(\"sharp\");\r\n        }\r\n    }\r\n    catch (e) { }\r\n    return null;\r\n}\r\nfunction requireElectronCommon() {\r\n    try {\r\n        if (requirefunction) {\r\n            return requirefunction(\"electron/common\");\r\n        }\r\n        else {\r\n            return require(/* webpackIgnore: true */ \"electron/common\");\r\n        }\r\n    }\r\n    catch (e) { }\r\n    return null;\r\n}\r\nfunction imageDataToDrawable(buf) {\r\n    let nodecnv = requireNodeCanvas();\r\n    if (!nodecnv) {\r\n        throw new Error(\"couldn't find built-in canvas or the module 'canvas'\");\r\n    }\r\n    return new nodecnv.ImageData(buf.data, buf.width, buf.height);\r\n}\r\nfunction createCanvas(w, h) {\r\n    let nodecnv = requireNodeCanvas();\r\n    if (!nodecnv) {\r\n        throw new Error(\"couldn't find built-in canvas or the module 'canvas'\");\r\n    }\r\n    return nodecnv.createCanvas(w, h);\r\n}\r\nfunction flipBGRAtoRGBA(data) {\r\n    for (let i = 0; i < data.length; i += 4) {\r\n        let tmp = data[i + 2];\r\n        data[i + 2] = data[i + 0];\r\n        data[i + 0] = tmp;\r\n    }\r\n}\r\nfunction imageDataToFileBytes(buf, format, quality) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        //use the electron API if we're in electron\r\n        var electronCommon;\r\n        var sharp;\r\n        if (electronCommon = requireElectronCommon()) {\r\n            let nativeImage = electronCommon.nativeImage;\r\n            //need to copy the buffer in order to flip it without destroying the original\r\n            let bufcpy = Buffer.from(buf.data.slice(buf.data.byteOffset, buf.data.byteLength));\r\n            flipBGRAtoRGBA(bufcpy);\r\n            let nativeimg = nativeImage.createFromBitmap(bufcpy, { width: buf.width, height: buf.height });\r\n            return nativeimg.toPNG();\r\n        }\r\n        else if (sharp = requireSharp()) {\r\n            let img = sharp(Buffer.from(buf.data.buffer), { raw: { width: buf.width, height: buf.height, channels: 4 } });\r\n            if (format == \"image/png\") {\r\n                img.png();\r\n            }\r\n            else if (format == \"image/webp\") {\r\n                var opts = { quality: 80 };\r\n                if (typeof quality == \"number\") {\r\n                    opts.quality = quality * 100;\r\n                }\r\n                img.webp(opts);\r\n            }\r\n            else {\r\n                throw new Error(\"unknown image format: \" + format);\r\n            }\r\n            return yield img.toBuffer({ resolveWithObject: false }).buffer;\r\n        }\r\n        throw new Error(\"coulnd't find build-in image compression methods or the module 'electron/common' or 'sharp'\");\r\n    });\r\n}\r\nfunction imageDataFromBase64(base64) {\r\n    return imageDataFromBuffer(Buffer.from(base64, \"base64\"));\r\n}\r\nfunction imageDataFromBuffer(buffer) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        (0,_imagedetect_js__WEBPACK_IMPORTED_MODULE_1__.clearPngColorspace)(buffer);\r\n        //use the electron API if we're in electron\r\n        var electronCommon;\r\n        var nodecnv;\r\n        if (electronCommon = requireElectronCommon()) {\r\n            let nativeImage = electronCommon.nativeImage;\r\n            let img = nativeImage.createFromBuffer(buffer);\r\n            let pixels = img.toBitmap();\r\n            let size = img.getSize();\r\n            let pixbuf = new Uint8ClampedArray(pixels.buffer, pixels.byteOffset, pixels.byteLength);\r\n            flipBGRAtoRGBA(pixbuf);\r\n            return new _index_js__WEBPACK_IMPORTED_MODULE_0__.ImageData(pixbuf, size.width, size.height);\r\n        }\r\n        else if (nodecnv = requireNodeCanvas()) {\r\n            return new Promise((done, err) => {\r\n                let img = new nodecnv.Image();\r\n                img.onerror = err;\r\n                img.onload = () => {\r\n                    var cnv = nodecnv.createCanvas(img.naturalWidth, img.naturalHeight);\r\n                    var ctx = cnv.getContext(\"2d\");\r\n                    ctx.drawImage(img, 0, 0);\r\n                    var data = ctx.getImageData(0, 0, img.naturalWidth, img.naturalHeight);\r\n                    //use our own class\r\n                    done(new _index_js__WEBPACK_IMPORTED_MODULE_0__.ImageData(data.data, data.width, data.height));\r\n                };\r\n                img.src = Buffer.from(buffer.buffer, buffer.byteOffset, buffer.byteLength);\r\n            });\r\n        }\r\n        throw new Error(\"couldn't find built-in canvas, module 'electron/common' or the module 'canvas'\");\r\n    });\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@alt1/base/dist/nodepolyfill.js\n");

/***/ }),

/***/ "../node_modules/@alt1/base/dist/pasteinput.js":
/*!*****************************************************!*\
  !*** ../node_modules/@alt1/base/dist/pasteinput.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"lastref\": () => (/* binding */ lastref),\n/* harmony export */   \"listen\": () => (/* binding */ listen),\n/* harmony export */   \"unlisten\": () => (/* binding */ unlisten),\n/* harmony export */   \"triggerPaste\": () => (/* binding */ triggerPaste),\n/* harmony export */   \"startDragNDrop\": () => (/* binding */ startDragNDrop),\n/* harmony export */   \"start\": () => (/* binding */ start),\n/* harmony export */   \"fileDialog\": () => (/* binding */ fileDialog)\n/* harmony export */ });\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.js */ \"../node_modules/@alt1/base/dist/index.js\");\n/* harmony import */ var _imagedetect_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./imagedetect.js */ \"../node_modules/@alt1/base/dist/imagedetect.js\");\n\r\n\r\nvar listeners = [];\r\nvar started = false;\r\nvar dndStarted = false;\r\nvar pasting = false;\r\nvar lastref = null;\r\nfunction listen(func, errorfunc, dragndrop) {\r\n    listeners.push({ cb: func, error: errorfunc });\r\n    if (!started) {\r\n        start();\r\n    }\r\n    if (dragndrop && !dndStarted) {\r\n        startDragNDrop();\r\n    }\r\n}\r\nfunction unlisten(func) {\r\n    let i = listeners.findIndex(c => c.cb == func);\r\n    if (i != -1) {\r\n        listeners.splice(i, 1);\r\n    }\r\n}\r\n/**\r\n * currently used in multiple document situations (iframe), might be removed in the future\r\n */\r\nfunction triggerPaste(img) {\r\n    lastref = img;\r\n    for (var a in listeners) {\r\n        listeners[a].cb(lastref);\r\n    }\r\n}\r\nfunction pasted(img) {\r\n    pasting = false;\r\n    let cnv = img instanceof HTMLCanvasElement ? img : img.toCanvas();\r\n    triggerPaste(new _index_js__WEBPACK_IMPORTED_MODULE_0__.ImgRefCtx(cnv));\r\n}\r\nfunction error(error, mes) {\r\n    var _a, _b;\r\n    pasting = false;\r\n    for (var a in listeners) {\r\n        (_b = (_a = listeners[a]).error) === null || _b === void 0 ? void 0 : _b.call(_a, mes, error);\r\n    }\r\n}\r\nfunction startDragNDrop() {\r\n    var getitem = function (items) {\r\n        var foundimage = \"\";\r\n        for (var a = 0; a < items.length; a++) {\r\n            var item = items[a];\r\n            var m = item.type.match(/^image\\/(\\w+)$/);\r\n            if (m) {\r\n                if (m[1] == \"png\") {\r\n                    return item;\r\n                }\r\n                else {\r\n                    foundimage = m[1];\r\n                }\r\n            }\r\n        }\r\n        if (foundimage) {\r\n            error(\"notpng\", \"The image you uploaded is not a .png image. Other image type have compression noise and can't be used for image detection.\");\r\n        }\r\n        return null;\r\n    };\r\n    window.addEventListener(\"dragover\", function (e) {\r\n        e.preventDefault();\r\n    });\r\n    window.addEventListener(\"drop\", function (e) {\r\n        if (!e.dataTransfer) {\r\n            return;\r\n        }\r\n        var item = getitem(e.dataTransfer.items);\r\n        e.preventDefault();\r\n        if (!item) {\r\n            return;\r\n        }\r\n        fromFile(item.getAsFile());\r\n    });\r\n}\r\nfunction start() {\r\n    if (started) {\r\n        return;\r\n    }\r\n    started = true;\r\n    //determine if we have a clipboard api\r\n    //try{a=new Event(\"clipboard\"); a=\"clipboardData\" in a;}\r\n    //catch(e){a=false;}\r\n    var ischrome = !!navigator.userAgent.match(/Chrome/) && !navigator.userAgent.match(/Edge/);\r\n    //old method breaks after chrome 41, revert to good old user agent sniffing\r\n    //nvm, internet explorer (edge) decided that it wants to be chrome, however fails at delivering\r\n    //turns out this one is interesting, edge is a hybrid between the paste api's\r\n    var apipasted = function (e) {\r\n        if (!e.clipboardData) {\r\n            return;\r\n        }\r\n        for (var a = 0; a < e.clipboardData.items.length; a++) { //loop all data types\r\n            if (e.clipboardData.items[a].type.indexOf(\"image\") != -1) {\r\n                var file = e.clipboardData.items[a].getAsFile();\r\n                var img = new Image();\r\n                img.src = (window.URL || window.webkitURL).createObjectURL(file);\r\n                if (img.width > 0) {\r\n                    pasted(img);\r\n                }\r\n                else {\r\n                    img.onload = function () { pasted(img); };\r\n                }\r\n            }\r\n        }\r\n    };\r\n    if (ischrome) {\r\n        document.addEventListener(\"paste\", apipasted);\r\n    }\r\n    else {\r\n        var catcher = document.createElement(\"div\");\r\n        catcher.setAttribute(\"contenteditable\", \"\");\r\n        catcher.className = \"forcehidden\"; //retarded ie safety/bug, cant apply styles using js//TODO i don't even know what's going on\r\n        catcher.onpaste = function (e) {\r\n            if (e.clipboardData && e.clipboardData.items) {\r\n                apipasted(e);\r\n                return;\r\n            }\r\n            setTimeout(function () {\r\n                var b = catcher.children[0];\r\n                if (!b || b.tagName != \"IMG\") {\r\n                    return;\r\n                }\r\n                var img = new Image();\r\n                img.src = b.src;\r\n                var a = img.src.match(/^data:([\\w\\/]+);/);\r\n                if (img.width > 0) {\r\n                    pasted(img);\r\n                }\r\n                else {\r\n                    img.onload = function () { pasted(img); };\r\n                }\r\n                catcher.innerHTML = \"\";\r\n            }, 1);\r\n        };\r\n        document.body.appendChild(catcher);\r\n    }\r\n    //detect if ctrl-v is pressed and focus catcher if needed\r\n    document.addEventListener(\"keydown\", function (e) {\r\n        if (e.target.tagName == \"INPUT\") {\r\n            return;\r\n        }\r\n        if (e.keyCode != \"V\".charCodeAt(0) || !e.ctrlKey) {\r\n            return;\r\n        }\r\n        pasting = true;\r\n        setTimeout(function () {\r\n            if (pasting) {\r\n                error(\"noimg\", \"You pressed Ctrl+V, but no image was pasted by your browser, make sure your clipboard contains an image, and not a link to an image.\");\r\n            }\r\n        }, 1000);\r\n        if (catcher) {\r\n            catcher.focus();\r\n        }\r\n    });\r\n}\r\nfunction fileDialog() {\r\n    var fileinput = document.createElement(\"input\");\r\n    fileinput.type = \"file\";\r\n    fileinput.accept = \"image/png\";\r\n    fileinput.onchange = function () { if (fileinput.files && fileinput.files[0]) {\r\n        fromFile(fileinput.files[0]);\r\n    } };\r\n    fileinput.click();\r\n    return fileinput;\r\n}\r\nfunction fromFile(file) {\r\n    if (!file) {\r\n        return;\r\n    }\r\n    var reader = new FileReader();\r\n    reader.onload = function () {\r\n        var bytearray = new Uint8Array(reader.result);\r\n        if (_imagedetect_js__WEBPACK_IMPORTED_MODULE_1__.isPngBuffer(bytearray)) {\r\n            _imagedetect_js__WEBPACK_IMPORTED_MODULE_1__.clearPngColorspace(bytearray);\r\n        }\r\n        var blob = new Blob([bytearray], { type: \"image/png\" });\r\n        var img = new Image();\r\n        img.onerror = () => error(\"invalidfile\", \"The file you uploaded could not be opened as an image.\");\r\n        var bloburl = URL.createObjectURL(blob);\r\n        img.src = bloburl;\r\n        if (img.width > 0) {\r\n            pasted(img);\r\n            URL.revokeObjectURL(bloburl);\r\n        }\r\n        else {\r\n            img.onload = function () { pasted(img); URL.revokeObjectURL(bloburl); };\r\n        }\r\n    };\r\n    reader.readAsArrayBuffer(file);\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BhbHQxL2Jhc2UvZGlzdC9wYXN0ZWlucHV0LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUF1QztBQUNTO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDQTtBQUNQLHFCQUFxQiw0QkFBNEI7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsZ0RBQVM7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBLHdCQUF3QixrQkFBa0I7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSwwQkFBMEI7QUFDcEMsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0Isa0NBQWtDLE9BQU87QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQ7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0M7QUFDL0M7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHdEQUF1QjtBQUNuQyxZQUFZLCtEQUE4QjtBQUMxQztBQUNBLDJDQUEyQyxtQkFBbUI7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLGFBQWE7QUFDcEQ7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9URVNULy4uL25vZGVfbW9kdWxlcy9AYWx0MS9iYXNlL2Rpc3QvcGFzdGVpbnB1dC5qcz85ZTY2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEltZ1JlZkN0eCB9IGZyb20gXCIuL2luZGV4LmpzXCI7XHJcbmltcG9ydCAqIGFzIEltYWdlRGV0ZWN0IGZyb20gXCIuL2ltYWdlZGV0ZWN0LmpzXCI7XHJcbnZhciBsaXN0ZW5lcnMgPSBbXTtcclxudmFyIHN0YXJ0ZWQgPSBmYWxzZTtcclxudmFyIGRuZFN0YXJ0ZWQgPSBmYWxzZTtcclxudmFyIHBhc3RpbmcgPSBmYWxzZTtcclxuZXhwb3J0IHZhciBsYXN0cmVmID0gbnVsbDtcclxuZXhwb3J0IGZ1bmN0aW9uIGxpc3RlbihmdW5jLCBlcnJvcmZ1bmMsIGRyYWduZHJvcCkge1xyXG4gICAgbGlzdGVuZXJzLnB1c2goeyBjYjogZnVuYywgZXJyb3I6IGVycm9yZnVuYyB9KTtcclxuICAgIGlmICghc3RhcnRlZCkge1xyXG4gICAgICAgIHN0YXJ0KCk7XHJcbiAgICB9XHJcbiAgICBpZiAoZHJhZ25kcm9wICYmICFkbmRTdGFydGVkKSB7XHJcbiAgICAgICAgc3RhcnREcmFnTkRyb3AoKTtcclxuICAgIH1cclxufVxyXG5leHBvcnQgZnVuY3Rpb24gdW5saXN0ZW4oZnVuYykge1xyXG4gICAgbGV0IGkgPSBsaXN0ZW5lcnMuZmluZEluZGV4KGMgPT4gYy5jYiA9PSBmdW5jKTtcclxuICAgIGlmIChpICE9IC0xKSB7XHJcbiAgICAgICAgbGlzdGVuZXJzLnNwbGljZShpLCAxKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogY3VycmVudGx5IHVzZWQgaW4gbXVsdGlwbGUgZG9jdW1lbnQgc2l0dWF0aW9ucyAoaWZyYW1lKSwgbWlnaHQgYmUgcmVtb3ZlZCBpbiB0aGUgZnV0dXJlXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdHJpZ2dlclBhc3RlKGltZykge1xyXG4gICAgbGFzdHJlZiA9IGltZztcclxuICAgIGZvciAodmFyIGEgaW4gbGlzdGVuZXJzKSB7XHJcbiAgICAgICAgbGlzdGVuZXJzW2FdLmNiKGxhc3RyZWYpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHBhc3RlZChpbWcpIHtcclxuICAgIHBhc3RpbmcgPSBmYWxzZTtcclxuICAgIGxldCBjbnYgPSBpbWcgaW5zdGFuY2VvZiBIVE1MQ2FudmFzRWxlbWVudCA/IGltZyA6IGltZy50b0NhbnZhcygpO1xyXG4gICAgdHJpZ2dlclBhc3RlKG5ldyBJbWdSZWZDdHgoY252KSk7XHJcbn1cclxuZnVuY3Rpb24gZXJyb3IoZXJyb3IsIG1lcykge1xyXG4gICAgdmFyIF9hLCBfYjtcclxuICAgIHBhc3RpbmcgPSBmYWxzZTtcclxuICAgIGZvciAodmFyIGEgaW4gbGlzdGVuZXJzKSB7XHJcbiAgICAgICAgKF9iID0gKF9hID0gbGlzdGVuZXJzW2FdKS5lcnJvcikgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EsIG1lcywgZXJyb3IpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBzdGFydERyYWdORHJvcCgpIHtcclxuICAgIHZhciBnZXRpdGVtID0gZnVuY3Rpb24gKGl0ZW1zKSB7XHJcbiAgICAgICAgdmFyIGZvdW5kaW1hZ2UgPSBcIlwiO1xyXG4gICAgICAgIGZvciAodmFyIGEgPSAwOyBhIDwgaXRlbXMubGVuZ3RoOyBhKyspIHtcclxuICAgICAgICAgICAgdmFyIGl0ZW0gPSBpdGVtc1thXTtcclxuICAgICAgICAgICAgdmFyIG0gPSBpdGVtLnR5cGUubWF0Y2goL15pbWFnZVxcLyhcXHcrKSQvKTtcclxuICAgICAgICAgICAgaWYgKG0pIHtcclxuICAgICAgICAgICAgICAgIGlmIChtWzFdID09IFwicG5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvdW5kaW1hZ2UgPSBtWzFdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChmb3VuZGltYWdlKSB7XHJcbiAgICAgICAgICAgIGVycm9yKFwibm90cG5nXCIsIFwiVGhlIGltYWdlIHlvdSB1cGxvYWRlZCBpcyBub3QgYSAucG5nIGltYWdlLiBPdGhlciBpbWFnZSB0eXBlIGhhdmUgY29tcHJlc3Npb24gbm9pc2UgYW5kIGNhbid0IGJlIHVzZWQgZm9yIGltYWdlIGRldGVjdGlvbi5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfTtcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiZHJhZ292ZXJcIiwgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICB9KTtcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiZHJvcFwiLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGlmICghZS5kYXRhVHJhbnNmZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgaXRlbSA9IGdldGl0ZW0oZS5kYXRhVHJhbnNmZXIuaXRlbXMpO1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBpZiAoIWl0ZW0pIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmcm9tRmlsZShpdGVtLmdldEFzRmlsZSgpKTtcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBzdGFydCgpIHtcclxuICAgIGlmIChzdGFydGVkKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgc3RhcnRlZCA9IHRydWU7XHJcbiAgICAvL2RldGVybWluZSBpZiB3ZSBoYXZlIGEgY2xpcGJvYXJkIGFwaVxyXG4gICAgLy90cnl7YT1uZXcgRXZlbnQoXCJjbGlwYm9hcmRcIik7IGE9XCJjbGlwYm9hcmREYXRhXCIgaW4gYTt9XHJcbiAgICAvL2NhdGNoKGUpe2E9ZmFsc2U7fVxyXG4gICAgdmFyIGlzY2hyb21lID0gISFuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9DaHJvbWUvKSAmJiAhbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvRWRnZS8pO1xyXG4gICAgLy9vbGQgbWV0aG9kIGJyZWFrcyBhZnRlciBjaHJvbWUgNDEsIHJldmVydCB0byBnb29kIG9sZCB1c2VyIGFnZW50IHNuaWZmaW5nXHJcbiAgICAvL252bSwgaW50ZXJuZXQgZXhwbG9yZXIgKGVkZ2UpIGRlY2lkZWQgdGhhdCBpdCB3YW50cyB0byBiZSBjaHJvbWUsIGhvd2V2ZXIgZmFpbHMgYXQgZGVsaXZlcmluZ1xyXG4gICAgLy90dXJucyBvdXQgdGhpcyBvbmUgaXMgaW50ZXJlc3RpbmcsIGVkZ2UgaXMgYSBoeWJyaWQgYmV0d2VlbiB0aGUgcGFzdGUgYXBpJ3NcclxuICAgIHZhciBhcGlwYXN0ZWQgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGlmICghZS5jbGlwYm9hcmREYXRhKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yICh2YXIgYSA9IDA7IGEgPCBlLmNsaXBib2FyZERhdGEuaXRlbXMubGVuZ3RoOyBhKyspIHsgLy9sb29wIGFsbCBkYXRhIHR5cGVzXHJcbiAgICAgICAgICAgIGlmIChlLmNsaXBib2FyZERhdGEuaXRlbXNbYV0udHlwZS5pbmRleE9mKFwiaW1hZ2VcIikgIT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIHZhciBmaWxlID0gZS5jbGlwYm9hcmREYXRhLml0ZW1zW2FdLmdldEFzRmlsZSgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGltZyA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICAgICAgICAgICAgaW1nLnNyYyA9ICh3aW5kb3cuVVJMIHx8IHdpbmRvdy53ZWJraXRVUkwpLmNyZWF0ZU9iamVjdFVSTChmaWxlKTtcclxuICAgICAgICAgICAgICAgIGlmIChpbWcud2lkdGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFzdGVkKGltZyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpbWcub25sb2FkID0gZnVuY3Rpb24gKCkgeyBwYXN0ZWQoaW1nKTsgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBpZiAoaXNjaHJvbWUpIHtcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwicGFzdGVcIiwgYXBpcGFzdGVkKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHZhciBjYXRjaGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICBjYXRjaGVyLnNldEF0dHJpYnV0ZShcImNvbnRlbnRlZGl0YWJsZVwiLCBcIlwiKTtcclxuICAgICAgICBjYXRjaGVyLmNsYXNzTmFtZSA9IFwiZm9yY2VoaWRkZW5cIjsgLy9yZXRhcmRlZCBpZSBzYWZldHkvYnVnLCBjYW50IGFwcGx5IHN0eWxlcyB1c2luZyBqcy8vVE9ETyBpIGRvbid0IGV2ZW4ga25vdyB3aGF0J3MgZ29pbmcgb25cclxuICAgICAgICBjYXRjaGVyLm9ucGFzdGUgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBpZiAoZS5jbGlwYm9hcmREYXRhICYmIGUuY2xpcGJvYXJkRGF0YS5pdGVtcykge1xyXG4gICAgICAgICAgICAgICAgYXBpcGFzdGVkKGUpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGIgPSBjYXRjaGVyLmNoaWxkcmVuWzBdO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFiIHx8IGIudGFnTmFtZSAhPSBcIklNR1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIGltZyA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICAgICAgICAgICAgaW1nLnNyYyA9IGIuc3JjO1xyXG4gICAgICAgICAgICAgICAgdmFyIGEgPSBpbWcuc3JjLm1hdGNoKC9eZGF0YTooW1xcd1xcL10rKTsvKTtcclxuICAgICAgICAgICAgICAgIGlmIChpbWcud2lkdGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFzdGVkKGltZyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpbWcub25sb2FkID0gZnVuY3Rpb24gKCkgeyBwYXN0ZWQoaW1nKTsgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhdGNoZXIuaW5uZXJIVE1MID0gXCJcIjtcclxuICAgICAgICAgICAgfSwgMSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNhdGNoZXIpO1xyXG4gICAgfVxyXG4gICAgLy9kZXRlY3QgaWYgY3RybC12IGlzIHByZXNzZWQgYW5kIGZvY3VzIGNhdGNoZXIgaWYgbmVlZGVkXHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGlmIChlLnRhcmdldC50YWdOYW1lID09IFwiSU5QVVRcIikge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChlLmtleUNvZGUgIT0gXCJWXCIuY2hhckNvZGVBdCgwKSB8fCAhZS5jdHJsS2V5KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcGFzdGluZyA9IHRydWU7XHJcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChwYXN0aW5nKSB7XHJcbiAgICAgICAgICAgICAgICBlcnJvcihcIm5vaW1nXCIsIFwiWW91IHByZXNzZWQgQ3RybCtWLCBidXQgbm8gaW1hZ2Ugd2FzIHBhc3RlZCBieSB5b3VyIGJyb3dzZXIsIG1ha2Ugc3VyZSB5b3VyIGNsaXBib2FyZCBjb250YWlucyBhbiBpbWFnZSwgYW5kIG5vdCBhIGxpbmsgdG8gYW4gaW1hZ2UuXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgMTAwMCk7XHJcbiAgICAgICAgaWYgKGNhdGNoZXIpIHtcclxuICAgICAgICAgICAgY2F0Y2hlci5mb2N1cygpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBmaWxlRGlhbG9nKCkge1xyXG4gICAgdmFyIGZpbGVpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcclxuICAgIGZpbGVpbnB1dC50eXBlID0gXCJmaWxlXCI7XHJcbiAgICBmaWxlaW5wdXQuYWNjZXB0ID0gXCJpbWFnZS9wbmdcIjtcclxuICAgIGZpbGVpbnB1dC5vbmNoYW5nZSA9IGZ1bmN0aW9uICgpIHsgaWYgKGZpbGVpbnB1dC5maWxlcyAmJiBmaWxlaW5wdXQuZmlsZXNbMF0pIHtcclxuICAgICAgICBmcm9tRmlsZShmaWxlaW5wdXQuZmlsZXNbMF0pO1xyXG4gICAgfSB9O1xyXG4gICAgZmlsZWlucHV0LmNsaWNrKCk7XHJcbiAgICByZXR1cm4gZmlsZWlucHV0O1xyXG59XHJcbmZ1bmN0aW9uIGZyb21GaWxlKGZpbGUpIHtcclxuICAgIGlmICghZmlsZSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xyXG4gICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgYnl0ZWFycmF5ID0gbmV3IFVpbnQ4QXJyYXkocmVhZGVyLnJlc3VsdCk7XHJcbiAgICAgICAgaWYgKEltYWdlRGV0ZWN0LmlzUG5nQnVmZmVyKGJ5dGVhcnJheSkpIHtcclxuICAgICAgICAgICAgSW1hZ2VEZXRlY3QuY2xlYXJQbmdDb2xvcnNwYWNlKGJ5dGVhcnJheSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBibG9iID0gbmV3IEJsb2IoW2J5dGVhcnJheV0sIHsgdHlwZTogXCJpbWFnZS9wbmdcIiB9KTtcclxuICAgICAgICB2YXIgaW1nID0gbmV3IEltYWdlKCk7XHJcbiAgICAgICAgaW1nLm9uZXJyb3IgPSAoKSA9PiBlcnJvcihcImludmFsaWRmaWxlXCIsIFwiVGhlIGZpbGUgeW91IHVwbG9hZGVkIGNvdWxkIG5vdCBiZSBvcGVuZWQgYXMgYW4gaW1hZ2UuXCIpO1xyXG4gICAgICAgIHZhciBibG9idXJsID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcclxuICAgICAgICBpbWcuc3JjID0gYmxvYnVybDtcclxuICAgICAgICBpZiAoaW1nLndpZHRoID4gMCkge1xyXG4gICAgICAgICAgICBwYXN0ZWQoaW1nKTtcclxuICAgICAgICAgICAgVVJMLnJldm9rZU9iamVjdFVSTChibG9idXJsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGltZy5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7IHBhc3RlZChpbWcpOyBVUkwucmV2b2tlT2JqZWN0VVJMKGJsb2J1cmwpOyB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoZmlsZSk7XHJcbn1cclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../node_modules/@alt1/base/dist/pasteinput.js\n");

/***/ }),

/***/ "../node_modules/@alt1/base/dist/rect.js":
/*!***********************************************!*\
  !*** ../node_modules/@alt1/base/dist/rect.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Rect)\n/* harmony export */ });\n//util class for rectangle maths\r\n//TODO shit this sucks can we remove it again?\r\n//more of a shorthand to get {x,y,width,height} than a class\r\n//kinda starting to like it again\r\n//TODO remove rant\r\n;\r\n/**\r\n * Simple rectangle class with some util functions\r\n */\r\nclass Rect {\r\n    constructor(x, y, w, h) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = w;\r\n        this.height = h;\r\n    }\r\n    static fromArgs(...args) {\r\n        if (typeof args[0] == \"object\") {\r\n            return new Rect(args[0].x, args[0].y, args[0].width, args[0].height);\r\n        }\r\n        else if (typeof args[0] == \"number\" && args.length >= 4) {\r\n            return new Rect(args[0], args[1], args[2], args[3]);\r\n        }\r\n        else {\r\n            throw new Error(\"invalid rect args\");\r\n        }\r\n    }\r\n    /**\r\n     * Resizes this Rect to include the full size of a given second rectangle\r\n     */\r\n    union(r2) {\r\n        var x = Math.min(this.x, r2.x);\r\n        var y = Math.min(this.y, r2.y);\r\n        this.width = Math.max(this.x + this.width, r2.x + r2.width) - x;\r\n        this.height = Math.max(this.y + this.height, r2.y + r2.height) - y;\r\n        this.x = x;\r\n        this.y = y;\r\n        return this;\r\n    }\r\n    /**\r\n     * Resizes this Rect to include a given point\r\n     */\r\n    includePoint(x, y) {\r\n        this.union(new Rect(x, y, 0, 0));\r\n    }\r\n    /**\r\n     * Grows the rectangle with the given dimensions\r\n     */\r\n    inflate(w, h) {\r\n        this.x -= w;\r\n        this.y -= h;\r\n        this.width += 2 * w;\r\n        this.height += 2 * h;\r\n    }\r\n    /**\r\n     * Resizes this Rect to the area that overlaps a given Rect\r\n     * width and height will be set to 0 if the intersection does not exist\r\n     */\r\n    intersect(r2) {\r\n        if (this.x < r2.x) {\r\n            this.width -= r2.x - this.x;\r\n            this.x = r2.x;\r\n        }\r\n        if (this.y < r2.y) {\r\n            this.height -= r2.y - this.y;\r\n            this.y = r2.y;\r\n        }\r\n        this.width = Math.min(this.x + this.width, r2.x + r2.width) - this.x;\r\n        this.height = Math.min(this.y + this.height, r2.y + r2.height) - this.y;\r\n        if (this.width <= 0 || this.height <= 0) {\r\n            this.width = 0;\r\n            this.height = 0;\r\n        }\r\n    }\r\n    /**\r\n     * Returns wether this Rect has at least one pixel overlap with a given Rect\r\n     */\r\n    overlaps(r2) {\r\n        return this.x < r2.x + r2.width && this.x + this.width > r2.x && this.y < r2.y + r2.height && this.y + this.height > r2.y;\r\n    }\r\n    /**\r\n     * Returns wether a given Rect fits completely inside this Rect\r\n     * @param r2\r\n     */\r\n    contains(r2) {\r\n        return this.x <= r2.x && this.x + this.width >= r2.x + r2.width && this.y <= r2.y && this.y + this.height >= r2.y + r2.height;\r\n    }\r\n    /**\r\n     * Returns wether a given point lies inside this Rect\r\n     */\r\n    containsPoint(x, y) {\r\n        return this.x <= x && this.x + this.width > x && this.y <= y && this.y + this.height > y;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BhbHQxL2Jhc2UvZGlzdC9yZWN0LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0EsOEJBQThCLGtCQUFrQjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL1RFU1QvLi4vbm9kZV9tb2R1bGVzL0BhbHQxL2Jhc2UvZGlzdC9yZWN0LmpzPzcxMTUiXSwic291cmNlc0NvbnRlbnQiOlsiLy91dGlsIGNsYXNzIGZvciByZWN0YW5nbGUgbWF0aHNcclxuLy9UT0RPIHNoaXQgdGhpcyBzdWNrcyBjYW4gd2UgcmVtb3ZlIGl0IGFnYWluP1xyXG4vL21vcmUgb2YgYSBzaG9ydGhhbmQgdG8gZ2V0IHt4LHksd2lkdGgsaGVpZ2h0fSB0aGFuIGEgY2xhc3NcclxuLy9raW5kYSBzdGFydGluZyB0byBsaWtlIGl0IGFnYWluXHJcbi8vVE9ETyByZW1vdmUgcmFudFxyXG47XHJcbi8qKlxyXG4gKiBTaW1wbGUgcmVjdGFuZ2xlIGNsYXNzIHdpdGggc29tZSB1dGlsIGZ1bmN0aW9uc1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVjdCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih4LCB5LCB3LCBoKSB7XHJcbiAgICAgICAgdGhpcy54ID0geDtcclxuICAgICAgICB0aGlzLnkgPSB5O1xyXG4gICAgICAgIHRoaXMud2lkdGggPSB3O1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gaDtcclxuICAgIH1cclxuICAgIHN0YXRpYyBmcm9tQXJncyguLi5hcmdzKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBhcmdzWzBdID09IFwib2JqZWN0XCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWN0KGFyZ3NbMF0ueCwgYXJnc1swXS55LCBhcmdzWzBdLndpZHRoLCBhcmdzWzBdLmhlaWdodCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBhcmdzWzBdID09IFwibnVtYmVyXCIgJiYgYXJncy5sZW5ndGggPj0gNCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFJlY3QoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHJlY3QgYXJnc1wiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJlc2l6ZXMgdGhpcyBSZWN0IHRvIGluY2x1ZGUgdGhlIGZ1bGwgc2l6ZSBvZiBhIGdpdmVuIHNlY29uZCByZWN0YW5nbGVcclxuICAgICAqL1xyXG4gICAgdW5pb24ocjIpIHtcclxuICAgICAgICB2YXIgeCA9IE1hdGgubWluKHRoaXMueCwgcjIueCk7XHJcbiAgICAgICAgdmFyIHkgPSBNYXRoLm1pbih0aGlzLnksIHIyLnkpO1xyXG4gICAgICAgIHRoaXMud2lkdGggPSBNYXRoLm1heCh0aGlzLnggKyB0aGlzLndpZHRoLCByMi54ICsgcjIud2lkdGgpIC0geDtcclxuICAgICAgICB0aGlzLmhlaWdodCA9IE1hdGgubWF4KHRoaXMueSArIHRoaXMuaGVpZ2h0LCByMi55ICsgcjIuaGVpZ2h0KSAtIHk7XHJcbiAgICAgICAgdGhpcy54ID0geDtcclxuICAgICAgICB0aGlzLnkgPSB5O1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXNpemVzIHRoaXMgUmVjdCB0byBpbmNsdWRlIGEgZ2l2ZW4gcG9pbnRcclxuICAgICAqL1xyXG4gICAgaW5jbHVkZVBvaW50KHgsIHkpIHtcclxuICAgICAgICB0aGlzLnVuaW9uKG5ldyBSZWN0KHgsIHksIDAsIDApKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogR3Jvd3MgdGhlIHJlY3RhbmdsZSB3aXRoIHRoZSBnaXZlbiBkaW1lbnNpb25zXHJcbiAgICAgKi9cclxuICAgIGluZmxhdGUodywgaCkge1xyXG4gICAgICAgIHRoaXMueCAtPSB3O1xyXG4gICAgICAgIHRoaXMueSAtPSBoO1xyXG4gICAgICAgIHRoaXMud2lkdGggKz0gMiAqIHc7XHJcbiAgICAgICAgdGhpcy5oZWlnaHQgKz0gMiAqIGg7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJlc2l6ZXMgdGhpcyBSZWN0IHRvIHRoZSBhcmVhIHRoYXQgb3ZlcmxhcHMgYSBnaXZlbiBSZWN0XHJcbiAgICAgKiB3aWR0aCBhbmQgaGVpZ2h0IHdpbGwgYmUgc2V0IHRvIDAgaWYgdGhlIGludGVyc2VjdGlvbiBkb2VzIG5vdCBleGlzdFxyXG4gICAgICovXHJcbiAgICBpbnRlcnNlY3QocjIpIHtcclxuICAgICAgICBpZiAodGhpcy54IDwgcjIueCkge1xyXG4gICAgICAgICAgICB0aGlzLndpZHRoIC09IHIyLnggLSB0aGlzLng7XHJcbiAgICAgICAgICAgIHRoaXMueCA9IHIyLng7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnkgPCByMi55KSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGVpZ2h0IC09IHIyLnkgLSB0aGlzLnk7XHJcbiAgICAgICAgICAgIHRoaXMueSA9IHIyLnk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMud2lkdGggPSBNYXRoLm1pbih0aGlzLnggKyB0aGlzLndpZHRoLCByMi54ICsgcjIud2lkdGgpIC0gdGhpcy54O1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gTWF0aC5taW4odGhpcy55ICsgdGhpcy5oZWlnaHQsIHIyLnkgKyByMi5oZWlnaHQpIC0gdGhpcy55O1xyXG4gICAgICAgIGlmICh0aGlzLndpZHRoIDw9IDAgfHwgdGhpcy5oZWlnaHQgPD0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLndpZHRoID0gMDtcclxuICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB3ZXRoZXIgdGhpcyBSZWN0IGhhcyBhdCBsZWFzdCBvbmUgcGl4ZWwgb3ZlcmxhcCB3aXRoIGEgZ2l2ZW4gUmVjdFxyXG4gICAgICovXHJcbiAgICBvdmVybGFwcyhyMikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnggPCByMi54ICsgcjIud2lkdGggJiYgdGhpcy54ICsgdGhpcy53aWR0aCA+IHIyLnggJiYgdGhpcy55IDwgcjIueSArIHIyLmhlaWdodCAmJiB0aGlzLnkgKyB0aGlzLmhlaWdodCA+IHIyLnk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgd2V0aGVyIGEgZ2l2ZW4gUmVjdCBmaXRzIGNvbXBsZXRlbHkgaW5zaWRlIHRoaXMgUmVjdFxyXG4gICAgICogQHBhcmFtIHIyXHJcbiAgICAgKi9cclxuICAgIGNvbnRhaW5zKHIyKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMueCA8PSByMi54ICYmIHRoaXMueCArIHRoaXMud2lkdGggPj0gcjIueCArIHIyLndpZHRoICYmIHRoaXMueSA8PSByMi55ICYmIHRoaXMueSArIHRoaXMuaGVpZ2h0ID49IHIyLnkgKyByMi5oZWlnaHQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgd2V0aGVyIGEgZ2l2ZW4gcG9pbnQgbGllcyBpbnNpZGUgdGhpcyBSZWN0XHJcbiAgICAgKi9cclxuICAgIGNvbnRhaW5zUG9pbnQoeCwgeSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnggPD0geCAmJiB0aGlzLnggKyB0aGlzLndpZHRoID4geCAmJiB0aGlzLnkgPD0geSAmJiB0aGlzLnkgKyB0aGlzLmhlaWdodCA+IHk7XHJcbiAgICB9XHJcbn1cclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../node_modules/@alt1/base/dist/rect.js\n");

/***/ }),

/***/ "../node_modules/@alt1/base/dist/wrapper.js":
/*!**************************************************!*\
  !*** ../node_modules/@alt1/base/dist/wrapper.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"NoAlt1Error\": () => (/* binding */ NoAlt1Error),\n/* harmony export */   \"Alt1Error\": () => (/* binding */ Alt1Error),\n/* harmony export */   \"newestversion\": () => (/* binding */ newestversion),\n/* harmony export */   \"hasAlt1\": () => (/* binding */ hasAlt1),\n/* harmony export */   \"skinName\": () => (/* binding */ skinName),\n/* harmony export */   \"openbrowser\": () => (/* binding */ openbrowser),\n/* harmony export */   \"requireAlt1\": () => (/* binding */ requireAlt1),\n/* harmony export */   \"getdisplaybounds\": () => (/* binding */ getdisplaybounds),\n/* harmony export */   \"capture\": () => (/* binding */ capture),\n/* harmony export */   \"captureHold\": () => (/* binding */ captureHold),\n/* harmony export */   \"captureHoldScreen\": () => (/* binding */ captureHoldScreen),\n/* harmony export */   \"captureHoldFullRs\": () => (/* binding */ captureHoldFullRs),\n/* harmony export */   \"transferImageData\": () => (/* binding */ transferImageData),\n/* harmony export */   \"decodeImageString\": () => (/* binding */ decodeImageString),\n/* harmony export */   \"encodeImageString\": () => (/* binding */ encodeImageString),\n/* harmony export */   \"mixColor\": () => (/* binding */ mixColor),\n/* harmony export */   \"unmixColor\": () => (/* binding */ unmixColor),\n/* harmony export */   \"identifyApp\": () => (/* binding */ identifyApp),\n/* harmony export */   \"resetEnvironment\": () => (/* binding */ resetEnvironment),\n/* harmony export */   \"hasAlt1Version\": () => (/* binding */ hasAlt1Version),\n/* harmony export */   \"getMousePosition\": () => (/* binding */ getMousePosition),\n/* harmony export */   \"addResizeElement\": () => (/* binding */ addResizeElement),\n/* harmony export */   \"on\": () => (/* binding */ on),\n/* harmony export */   \"removeListener\": () => (/* binding */ removeListener),\n/* harmony export */   \"once\": () => (/* binding */ once),\n/* harmony export */   \"ImageStreamReader\": () => (/* binding */ ImageStreamReader),\n/* harmony export */   \"captureAsync\": () => (/* binding */ captureAsync),\n/* harmony export */   \"captureMultiAsync\": () => (/* binding */ captureMultiAsync),\n/* harmony export */   \"captureStream\": () => (/* binding */ captureStream)\n/* harmony export */ });\n/* harmony import */ var _rect_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rect.js */ \"../node_modules/@alt1/base/dist/rect.js\");\n/* harmony import */ var _imgref_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./imgref.js */ \"../node_modules/@alt1/base/dist/imgref.js\");\n/* harmony import */ var _imagedata_extensions_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./imagedata-extensions.js */ \"../node_modules/@alt1/base/dist/imagedata-extensions.js\");\n/* harmony import */ var _alt1api_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./alt1api.js */ \"../node_modules/@alt1/base/dist/alt1api.js\");\n/* harmony import */ var _alt1api_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_alt1api_js__WEBPACK_IMPORTED_MODULE_3__);\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n/**\r\n * Thrown when a method is called that can not be used outside of Alt1\r\n */\r\nclass NoAlt1Error extends Error {\r\n    constructor() {\r\n        super();\r\n        this.message = \"This method can not be ran outside of Alt1\";\r\n    }\r\n}\r\n;\r\n/**\r\n * Thrown when the Alt1 API returns an invalid result\r\n * Errors of a different type are throw when internal Alt1 errors occur\r\n */\r\nclass Alt1Error extends Error {\r\n}\r\n/**\r\n * The latest Alt1 version\r\n */\r\nvar newestversion = \"1.5.5\";\r\n/**\r\n * Whether the Alt1 API is available\r\n */\r\nvar hasAlt1 = (typeof alt1 != \"undefined\");\r\n/**\r\n * The name of the Alt1 interface skin. (Always \"default\" if running in a browser)\r\n */\r\nvar skinName = hasAlt1 ? alt1.skinName : \"default\";\r\n/**\r\n * Max number of bytes that can be sent by alt1 in one function\r\n * Not completely sure why this number is different than window.alt1.maxtranfer\r\n */\r\nvar maxtransfer = 4000000;\r\n/**\r\n * Open a link in the default browser\r\n * @deprecated use window.open instead\r\n */\r\nfunction openbrowser(url) {\r\n    if (hasAlt1) {\r\n        alt1.openBrowser(url);\r\n    }\r\n    else {\r\n        window.open(url, '_blank');\r\n    }\r\n}\r\n/**\r\n * Throw if Alt1 API is not available\r\n */\r\nfunction requireAlt1() {\r\n    if (!hasAlt1) {\r\n        throw new NoAlt1Error();\r\n    }\r\n}\r\n/**\r\n * Returns an object with a rectangle that spans all screens\r\n */\r\nfunction getdisplaybounds() {\r\n    if (!hasAlt1) {\r\n        return false;\r\n    }\r\n    return new _rect_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](alt1.screenX, alt1.screenY, alt1.screenWidth, alt1.screenHeight);\r\n}\r\n/**\r\n * gets an imagebuffer with pixel data about the requested region\r\n */\r\nfunction capture(...args) {\r\n    //TODO change null return on error into throw instead (x3)\r\n    if (!hasAlt1) {\r\n        throw new NoAlt1Error();\r\n    }\r\n    var rect = _rect_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromArgs(...args);\r\n    if (alt1.capture) {\r\n        return new _imagedata_extensions_js__WEBPACK_IMPORTED_MODULE_2__.ImageData(alt1.capture(rect.x, rect.y, rect.width, rect.height), rect.width, rect.height);\r\n    }\r\n    var buf = new _imagedata_extensions_js__WEBPACK_IMPORTED_MODULE_2__.ImageData(rect.width, rect.height);\r\n    if (rect.width * rect.height * 4 <= maxtransfer) {\r\n        var data = alt1.getRegion(rect.x, rect.y, rect.width, rect.height);\r\n        if (!data) {\r\n            return null;\r\n        }\r\n        decodeImageString(data, buf, 0, 0, rect.width, rect.height);\r\n    }\r\n    else {\r\n        //split up the request to to exceed the single transfer limit (for now)\r\n        var x1 = rect.x;\r\n        var ref = alt1.bindRegion(rect.x, rect.y, rect.width, rect.height);\r\n        if (ref <= 0) {\r\n            return null;\r\n        }\r\n        while (x1 < rect.x + rect.width) {\r\n            var x2 = Math.min(rect.x + rect.width, Math.floor(x1 + (maxtransfer / 4 / rect.height)));\r\n            var data = alt1.bindGetRegion(ref, x1, rect.y, x2 - x1, rect.height);\r\n            if (!data) {\r\n                return null;\r\n            }\r\n            decodeImageString(data, buf, x1 - rect.x, 0, x2 - x1, rect.height);\r\n            x1 = x2;\r\n        }\r\n    }\r\n    return buf;\r\n}\r\n/**\r\n * Makes alt1 bind an area of the rs client in memory without sending it to the js client\r\n * returns an imgref object which can be used to get pixel data using the imgreftobuf function\r\n * currently only one bind can exist per app and the ref in (v) will always be 1\r\n */\r\nfunction captureHold(x, y, w, h) {\r\n    x = Math.round(x);\r\n    y = Math.round(y);\r\n    w = Math.round(w);\r\n    h = Math.round(h);\r\n    requireAlt1();\r\n    var r = alt1.bindRegion(x, y, w, h);\r\n    if (r <= 0) {\r\n        throw new Alt1Error(\"capturehold failed\");\r\n    }\r\n    return new _imgref_js__WEBPACK_IMPORTED_MODULE_1__.ImgRefBind(r, x, y, w, h);\r\n}\r\n/**\r\n * Same as captureHoldRegion, but captures the screen instead of the rs client. it also uses screen coordinates instead and can capture outside of the rs client\r\n */\r\nfunction captureHoldScreen(x, y, w, h) {\r\n    x = Math.round(x);\r\n    y = Math.round(y);\r\n    w = Math.round(w);\r\n    h = Math.round(h);\r\n    requireAlt1();\r\n    var r = alt1.bindScreenRegion(x, y, w, h);\r\n    if (r <= 0) {\r\n        return false;\r\n    }\r\n    return new _imgref_js__WEBPACK_IMPORTED_MODULE_1__.ImgRefBind(r, x, y, w, h);\r\n}\r\n/**\r\n * bind the full rs window if the rs window can be detected by alt1, otherwise return the full screen\r\n */\r\nfunction captureHoldFullRs() {\r\n    return captureHold(0, 0, alt1.rsWidth, alt1.rsHeight);\r\n}\r\n/**\r\n * returns a subregion from a bound image\r\n * used internally in imgreftobuf if imgref is a bound image\r\n * @deprecated This should be handled internall by the imgrefbind.toData method\r\n */\r\nfunction transferImageData(handle, x, y, w, h) {\r\n    x = Math.round(x);\r\n    y = Math.round(y);\r\n    w = Math.round(w);\r\n    h = Math.round(h);\r\n    requireAlt1();\r\n    if (alt1.bindGetRegionBuffer) {\r\n        return new _imagedata_extensions_js__WEBPACK_IMPORTED_MODULE_2__.ImageData(alt1.bindGetRegionBuffer(handle, x, y, w, h), w, h);\r\n    }\r\n    var r = new _imagedata_extensions_js__WEBPACK_IMPORTED_MODULE_2__.ImageData(w, h);\r\n    var x1 = x;\r\n    while (true) { //split up the request to to exceed the single transfer limit (for now)\r\n        var x2 = Math.min(x + w, Math.floor(x1 + (maxtransfer / 4 / h)));\r\n        var a = alt1.bindGetRegion(handle, x1, y, x2 - x1, h);\r\n        if (!a) {\r\n            throw new Alt1Error();\r\n        }\r\n        decodeImageString(a, r, x1 - x, 0, x2 - x1, h);\r\n        x1 = x2;\r\n        if (x1 == x + w) {\r\n            break;\r\n        }\r\n        ;\r\n    }\r\n    return r;\r\n}\r\n/**\r\n * decodes a returned string from alt1 to an imagebuffer\r\n */\r\nfunction decodeImageString(imagestring, target, x, y, w, h) {\r\n    var bin = atob(imagestring);\r\n    var bytes = target.data;\r\n    w |= 0;\r\n    h |= 0;\r\n    var offset = 4 * x + 4 * y * target.width;\r\n    var target_width = target.width | 0;\r\n    for (var a = 0; a < w; a++) {\r\n        for (var b = 0; b < h; b++) {\r\n            var i1 = (offset + (a * 4 | 0) + (b * target_width * 4 | 0)) | 0;\r\n            var i2 = ((a * 4 | 0) + (b * 4 * w | 0)) | 0;\r\n            bytes[i1 + 0 | 0] = bin.charCodeAt(i2 + 2 | 0); //fix weird red/blue swap in c#\r\n            bytes[i1 + 1 | 0] = bin.charCodeAt(i2 + 1 | 0);\r\n            bytes[i1 + 2 | 0] = bin.charCodeAt(i2 + 0 | 0);\r\n            bytes[i1 + 3 | 0] = bin.charCodeAt(i2 + 3 | 0);\r\n        }\r\n    }\r\n    return target;\r\n}\r\n/**\r\n * encodes an imagebuffer to a string\r\n */\r\nfunction encodeImageString(buf, sx = 0, sy = 0, sw = buf.width, sh = buf.height) {\r\n    var raw = \"\";\r\n    for (var y = sy; y < sy + sh; y++) {\r\n        for (var x = sx; x < sx + sw; x++) {\r\n            var i = 4 * x + 4 * buf.width * y | 0;\r\n            raw += String.fromCharCode(buf.data[i + 2 | 0]);\r\n            raw += String.fromCharCode(buf.data[i + 1 | 0]);\r\n            raw += String.fromCharCode(buf.data[i + 0 | 0]);\r\n            raw += String.fromCharCode(buf.data[i + 3 | 0]);\r\n        }\r\n    }\r\n    return btoa(raw);\r\n}\r\n/**\r\n * mixes the given color into a single int. This format is used by alt1\r\n */\r\nfunction mixColor(r, g, b, a = 255) {\r\n    return (b << 0) + (g << 8) + (r << 16) + (a << 24);\r\n}\r\nfunction unmixColor(col) {\r\n    var r = (col >> 16) & 0xff;\r\n    var g = (col >> 8) & 0xff;\r\n    var b = (col >> 0) & 0xff;\r\n    return [r, g, b];\r\n}\r\nfunction identifyApp(url) {\r\n    if (hasAlt1) {\r\n        alt1.identifyAppUrl(url);\r\n    }\r\n}\r\nfunction resetEnvironment() {\r\n    hasAlt1 = (typeof alt1 != \"undefined\");\r\n    skinName = hasAlt1 ? alt1.skinName : \"default\";\r\n}\r\nfunction convertAlt1Version(str) {\r\n    var a = str.match(/^(\\d+)\\.(\\d+)\\.(\\d+)$/);\r\n    if (!a) {\r\n        throw new RangeError(\"Invalid version string\");\r\n    }\r\n    return (+a[1]) * 1000 * 1000 + (+a[2]) * 1000 + (+a[3]) * 1;\r\n}\r\nvar cachedVersionInt = -1;\r\n/**\r\n * checks if alt1 is running and at least the given version. versionstr should be a string with the version eg: 1.3.2\r\n * @param versionstr\r\n */\r\nfunction hasAlt1Version(versionstr) {\r\n    if (!hasAlt1) {\r\n        return false;\r\n    }\r\n    if (cachedVersionInt == -1) {\r\n        cachedVersionInt = alt1.versionint;\r\n    }\r\n    return cachedVersionInt >= convertAlt1Version(versionstr);\r\n}\r\n/**\r\n * Gets the current cursor position in the game, returns null if the rs window is not active (alt1.rsActive)\r\n */\r\nfunction getMousePosition() {\r\n    var pos = alt1.mousePosition;\r\n    if (pos == -1) {\r\n        return null;\r\n    }\r\n    return { x: pos >>> 16, y: pos & 0xFFFF };\r\n}\r\n/**\r\n * Registers a given HTML element as a frame border, when this element is dragged by the user the Alt1 frame will resize accordingly\r\n * Use the direction arguements to make a given direction stick to the mouse. eg. Only set left to true to make the element behave as the left border\r\n * Or set all to true to move the whole window. Not all combinations are permitted\r\n */\r\nfunction addResizeElement(el, left, top, right, bot) {\r\n    if (!hasAlt1 || !alt1.userResize) {\r\n        return;\r\n    }\r\n    el.addEventListener(\"mousedown\", function (e) {\r\n        alt1.userResize(left, top, right, bot);\r\n        e.preventDefault();\r\n    });\r\n}\r\n/**\r\n * Add an event listener\r\n */\r\nfunction on(type, listener) {\r\n    requireAlt1();\r\n    if (!alt1.events) {\r\n        alt1.events = {};\r\n    }\r\n    if (!alt1.events[type]) {\r\n        alt1.events[type] = [];\r\n    }\r\n    alt1.events[type].push(listener);\r\n}\r\n/**\r\n * Removes an event listener\r\n */\r\nfunction removeListener(type, listener) {\r\n    var elist = alt1.events && alt1.events[type];\r\n    if (!elist) {\r\n        return;\r\n    }\r\n    var i = elist.indexOf(listener);\r\n    if (i == -1) {\r\n        return;\r\n    }\r\n    elist.splice(i, 1);\r\n}\r\n/**\r\n * Listens for the event to fire once and then stops listening\r\n * @param event\r\n * @param cb\r\n */\r\nfunction once(type, listener) {\r\n    requireAlt1();\r\n    var fn = (e) => {\r\n        removeListener(type, fn);\r\n        listener(e);\r\n    };\r\n    on(type, fn);\r\n}\r\n;\r\n/**\r\n * Used to read a set of images from a binary stream returned by the Alt1 API\r\n */\r\nclass ImageStreamReader {\r\n    constructor(reader, ...args) {\r\n        this.framebuffer = null;\r\n        this.pos = 0;\r\n        this.reading = false;\r\n        this.closed = false;\r\n        //paused state\r\n        this.pausedindex = -1;\r\n        this.pausedbuffer = null;\r\n        this.streamreader = reader;\r\n        if (args[0] instanceof _imagedata_extensions_js__WEBPACK_IMPORTED_MODULE_2__.ImageData) {\r\n            this.setFrameBuffer(args[0]);\r\n        }\r\n        else if (typeof args[0] == \"number\") {\r\n            this.setFrameBuffer(new _imagedata_extensions_js__WEBPACK_IMPORTED_MODULE_2__.ImageData(args[0], args[1]));\r\n        }\r\n    }\r\n    /**\r\n     *\r\n     */\r\n    setFrameBuffer(buffer) {\r\n        if (this.reading) {\r\n            throw new Error(\"can't change framebuffer while reading\");\r\n        }\r\n        this.framebuffer = buffer;\r\n    }\r\n    /**\r\n     * Closes the underlying stream and ends reading\r\n     */\r\n    close() {\r\n        this.streamreader.cancel();\r\n    }\r\n    /**\r\n     * Reads a single image from the stream\r\n     */\r\n    nextImage() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (this.reading) {\r\n                throw new Error(\"already reading from this stream\");\r\n            }\r\n            if (!this.framebuffer) {\r\n                throw new Error(\"framebuffer not set\");\r\n            }\r\n            this.reading = true;\r\n            var synctime = -Date.now();\r\n            var starttime = Date.now();\r\n            var r = false;\r\n            while (!r) {\r\n                if (this.pausedindex != -1 && this.pausedbuffer) {\r\n                    r = this.readChunk(this.pausedindex, this.framebuffer.data, this.pausedbuffer);\r\n                }\r\n                else {\r\n                    synctime += Date.now();\r\n                    var res = yield this.streamreader.read();\r\n                    synctime -= Date.now();\r\n                    if (res.done) {\r\n                        throw new Error(\"Stream closed while reading\");\r\n                    }\r\n                    var data = res.value;\r\n                    r = this.readChunk(0, this.framebuffer.data, data);\r\n                }\r\n            }\r\n            synctime += Date.now();\r\n            //console.log(\"Decoded async image, \" + this.framebuffer.width + \"x\" + this.framebuffer.height + \" time: \" + (Date.now() - starttime) + \"ms (\" + synctime + \"ms main thread)\");\r\n            this.reading = false;\r\n            return this.framebuffer;\r\n        });\r\n    }\r\n    readChunk(i, framedata, buffer) {\r\n        //very hot code, explicit int32 casting with |0 speeds it up by ~ x2\r\n        i = i | 0;\r\n        var framesize = framedata.length | 0;\r\n        var pos = this.pos;\r\n        var datalen = buffer.length | 0;\r\n        //var data32 = new Float64Array(buffer.buffer);\r\n        //var framedata32 = new Float64Array(framedata.buffer);\r\n        //fix possible buffer misalignment\r\n        //align to 16 for extra loop unrolling\r\n        while (i < datalen) {\r\n            //slow loop, fix alignment and other issues\r\n            while (i < datalen && pos < framesize && (pos % 16 != 0 || !((i + 16 | 0) <= datalen && (pos + 16 | 0) <= framesize))) {\r\n                var rel = pos;\r\n                if (pos % 4 == 0) {\r\n                    rel = rel + 2 | 0;\r\n                }\r\n                if (pos % 4 == 2) {\r\n                    rel = rel - 2 | 0;\r\n                }\r\n                framedata[rel | 0] = buffer[i | 0];\r\n                i = i + 1 | 0;\r\n                pos = pos + 1 | 0;\r\n            }\r\n            //fast unrolled loop for large chunks i wish js had some sort of memcpy\r\n            if (pos % 16 == 0) {\r\n                while ((i + 16 | 0) <= datalen && (pos + 16 | 0) <= framesize) {\r\n                    framedata[pos + 0 | 0] = buffer[i + 2 | 0];\r\n                    framedata[pos + 1 | 0] = buffer[i + 1 | 0];\r\n                    framedata[pos + 2 | 0] = buffer[i + 0 | 0];\r\n                    framedata[pos + 3 | 0] = buffer[i + 3 | 0];\r\n                    framedata[pos + 4 | 0] = buffer[i + 6 | 0];\r\n                    framedata[pos + 5 | 0] = buffer[i + 5 | 0];\r\n                    framedata[pos + 6 | 0] = buffer[i + 4 | 0];\r\n                    framedata[pos + 7 | 0] = buffer[i + 7 | 0];\r\n                    framedata[pos + 8 | 0] = buffer[i + 10 | 0];\r\n                    framedata[pos + 9 | 0] = buffer[i + 9 | 0];\r\n                    framedata[pos + 10 | 0] = buffer[i + 8 | 0];\r\n                    framedata[pos + 11 | 0] = buffer[i + 11 | 0];\r\n                    framedata[pos + 12 | 0] = buffer[i + 14 | 0];\r\n                    framedata[pos + 13 | 0] = buffer[i + 13 | 0];\r\n                    framedata[pos + 14 | 0] = buffer[i + 12 | 0];\r\n                    framedata[pos + 15 | 0] = buffer[i + 15 | 0];\r\n                    //could speed it up another x2 but wouldn't be able to swap r/b swap and possible alignment issues\r\n                    //framedata32[pos / 8 + 0 | 0] = data32[i / 8 + 0 | 0];\r\n                    //framedata32[pos / 8 + 1 | 0] = data32[i / 8 + 1 | 0];\r\n                    //framedata32[pos / 4 + 2 | 0] = data32[i / 4 + 2 | 0];\r\n                    //framedata32[pos / 4 + 3 | 0] = data32[i / 4 + 3 | 0];\r\n                    pos = pos + 16 | 0;\r\n                    i = i + 16 | 0;\r\n                }\r\n            }\r\n            if (pos >= framesize) {\r\n                this.pausedbuffer = null;\r\n                this.pausedindex = -1;\r\n                this.pos = 0;\r\n                if (i != buffer.length - 1) {\r\n                    this.pausedbuffer = buffer;\r\n                    this.pausedindex = i;\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n        this.pos = pos;\r\n        this.pausedbuffer = null;\r\n        this.pausedindex = -1;\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Asynchronously captures a section of the game screen\r\n */\r\nfunction captureAsync(...args) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        requireAlt1();\r\n        var rect = _rect_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fromArgs(...args);\r\n        if (alt1.captureAsync) {\r\n            let img = yield alt1.captureAsync(rect.x, rect.y, rect.width, rect.height);\r\n            return new _imagedata_extensions_js__WEBPACK_IMPORTED_MODULE_2__.ImageData(img, rect.width, rect.height);\r\n        }\r\n        if (!hasAlt1Version(\"1.4.6\")) {\r\n            return capture(rect.x, rect.y, rect.width, rect.height);\r\n        }\r\n        var url = \"https://alt1api/pixel/getregion/\" + encodeURIComponent(JSON.stringify(Object.assign(Object.assign({}, rect), { format: \"raw\", quality: 1 })));\r\n        var res = yield fetch(url);\r\n        var imgreader = new ImageStreamReader(res.body.getReader(), rect.width, rect.height);\r\n        return imgreader.nextImage();\r\n    });\r\n}\r\n/**\r\n * Asynchronously captures multple area's. This method captures the images in the same render frame if possible\r\n * @param areas\r\n */\r\nfunction captureMultiAsync(areas) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        requireAlt1();\r\n        var r = {};\r\n        if (alt1.captureMultiAsync) {\r\n            let bufs = yield alt1.captureMultiAsync(areas);\r\n            for (let a in areas) {\r\n                if (!bufs[a]) {\r\n                    r[a] = null;\r\n                }\r\n                r[a] = new _imagedata_extensions_js__WEBPACK_IMPORTED_MODULE_2__.ImageData(bufs[a], areas[a].width, areas[a].height);\r\n            }\r\n            return r;\r\n        }\r\n        var capts = [];\r\n        var captids = [];\r\n        for (var id in areas) {\r\n            if (areas[id]) {\r\n                capts.push(areas[id]);\r\n                captids.push(id);\r\n            }\r\n            else {\r\n                r[id] = null;\r\n            }\r\n        }\r\n        if (capts.length == 0) {\r\n            return r;\r\n        }\r\n        if (!hasAlt1Version(\"1.5.1\")) {\r\n            var proms = [];\r\n            for (var a = 0; a < capts.length; a++) {\r\n                proms.push(captureAsync(capts[a]));\r\n            }\r\n            var results = yield Promise.all(proms);\r\n            for (var a = 0; a < capts.length; a++) {\r\n                r[captids[a]] = results[a];\r\n            }\r\n        }\r\n        else {\r\n            var res = yield fetch(\"https://alt1api/pixel/getregionmulti/\" + encodeURIComponent(JSON.stringify({ areas: capts, format: \"raw\", quality: 1 })));\r\n            var imgreader = new ImageStreamReader(res.body.getReader());\r\n            for (var a = 0; a < capts.length; a++) {\r\n                var capt = capts[a];\r\n                imgreader.setFrameBuffer(new _imagedata_extensions_js__WEBPACK_IMPORTED_MODULE_2__.ImageData(capt.width, capt.height));\r\n                r[captids[a]] = yield imgreader.nextImage();\r\n            }\r\n        }\r\n        return r;\r\n    });\r\n}\r\n/**\r\n * Starts capturing a realtime stream of the game. Make sure you keep reading the stream and close it when you're done or Alt1 WILL crash\r\n * @param framecb Called whenever a new frame is decoded\r\n * @param errorcb Called whenever an error occurs, the error is rethrown if not defined\r\n * @param fps Maximum fps of the stream\r\n */\r\nfunction captureStream(x, y, width, height, fps, framecb, errorcb) {\r\n    requireAlt1();\r\n    if (!hasAlt1Version(\"1.4.6\")) {\r\n        throw new Alt1Error(\"This function is not supported in this version of Alt1\");\r\n    }\r\n    var url = \"https://alt1api/pixel/streamregion/\" + encodeURIComponent(JSON.stringify({ x, y, width, height, fps, format: \"raw\" }));\r\n    var res = fetch(url).then((res) => __awaiter(this, void 0, void 0, function* () {\r\n        var reader = new ImageStreamReader(res.body.getReader(), width, height);\r\n        try {\r\n            while (!reader.closed && !state.closed) {\r\n                var img = yield reader.nextImage();\r\n                if (!state.closed) {\r\n                    framecb(img);\r\n                    state.framenr++;\r\n                }\r\n            }\r\n        }\r\n        catch (e) {\r\n            if (!state.closed) {\r\n                reader.close();\r\n                if (errorcb) {\r\n                    errorcb(e);\r\n                }\r\n                else {\r\n                    throw e;\r\n                }\r\n            }\r\n        }\r\n        if (!reader.closed && state.closed) {\r\n            reader.close();\r\n        }\r\n    }));\r\n    var state = {\r\n        x, y, width, height,\r\n        framenr: 0,\r\n        close: () => { state.closed = true; },\r\n        closed: false,\r\n    };\r\n    return state;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@alt1/base/dist/wrapper.js\n");

/***/ }),

/***/ "./images/easy_casket.data.png":
/*!*************************************!*\
  !*** ./images/easy_casket.data.png ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports=(__webpack_require__(/*! @alt1/base */ \"../node_modules/@alt1/base/dist/index.js\").ImageDetect.imageDataFromBase64)(\"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\")//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9pbWFnZXMvZWFzeV9jYXNrZXQuZGF0YS5wbmcuanMiLCJtYXBwaW5ncyI6IkFBQUEsZUFBZSxtSEFBcUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9URVNULy4vaW1hZ2VzL2Vhc3lfY2Fza2V0LmRhdGEucG5nP2E4NWMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHM9cmVxdWlyZShcIkBhbHQxL2Jhc2VcIikuSW1hZ2VEZXRlY3QuaW1hZ2VEYXRhRnJvbUJhc2U2NChcImlWQk9SdzBLR2dvQUFBQU5TVWhFVWdBQUFDWUFBQUFpQ0FJQUFBQzh6anp2QUFBQUFXNXZVRVVBWXRkTWxBQUFBQVJ1YjFCRkFBQUFBRUVnamlJQUFBQUpibTlRUlFBQUFBQUFBQUFBQUtHS2N0VUFBQXBrU1VSQlZGaEhaVmRMakJ4SEdlN3U2bmZQczNkMmQzWjIxK3ZkZFJ3N0tJbVRFRzQ4aE1TSkkyZk9RWXFRQWxJa0l5SDVrSnhDRUlrUUVoRUhKQ1RDMVNSQk9RUlFvaVJJZ0lnU1J6YnIyRjdQUGoyUG5abWQ2ZWxYVlZjWFgzVnZRZ1RsMlhaMWRkWC8rUDVucWMzMUM2cWlhSUx6WE5FSjBYU1NaMXhSRlB3Ui9JZFBtc1k1dzRRWUpqNWhnMXdWT2FXWmFaazBwVjgrSlFSWFZhSnBDbVhjTkFpZThxdW01TG1TY1c2YUpJeVoydDY2TkptZVlyZHVHQmxqT0NBcFltQXJDUEF2clJTRDZJUm5IRTh3TXd4RDFWUjVpdWlTNnVkZnk1MmNjOE1nakhGQ0pJWHl0VmFwYWp6THNCbDBjeUc1Um9NampSQlYvaWxDVVhORnd4eS9YRlh4NUJBaXkrUXJqdWc2NDVJNlRpazV4eUtVeE92bkV3RjhHQmU2WVJKZHk0VUFQM0ROS0ZNWDE3ZW1VYUlCWEVLaUJ3ZXFpcDFxWlcwYnBLV294Y2h6a2VkYzEzVk04RFhMTXN1MkMxazVWdWp3K0d6Zi93MXpzWVA5bWhSQ1VVRWo1NDV1cW41bkk4NEU4QWNoZkVqNmgxRFE2V3hoemlnMVRCTVRmQ0theWtHOWY0RFgveG5mLzk1M0wxOStlbjExODZpMzN6OCtkaXpOOGFvcjV6Ym5zOGx6UDdscUxxOXJJZ2RxNEFkd0s3YWxMbTlzQjVSRHk3eXcyZnpnSGxoV3oxM2tRZ24zNzVSRXZ4alhmdnhEMDY2ZUR2WXNwM2JweWU5UUd2ZjJQcU5wT2svQzVzS1N5TVc5blkvVGVPQjVQcy81NHZwbElaU1hYbmtaWE9WaHNGVFVWdFZSMjVzWHgvTlloeC9DWnFvVzdOOEJTeUVBdFBMTFg3eEtrL1Rrc0x1OHNycjUwRk9EM3YzZFd4OWFybDlmMmpTdHltelNwM0U0SGgweGxnNkdvOGVmL2pxTzdPNThrZ1RIUkRmcmZzZXRMNnFHbFZQMjhxOWVkVmMzTTVvQzVMcHRxcDJ0aStNd2hwdkFYelRkTEZtKzhOTVhMei82aEdHWThQbzRtbzE2M2ZIdytON3REM1RWTURRZHBCMXZ3VzJlSThTVzRpT1FiQnNlT0I3MlpxY2pmM0VKb29NWVN3SjR2RmxiZk9uVmwrRk56c29HekY4SDdyQXBYQUJ1cHVwV2VIaXZKUEgrWDk1NCsvcnJjUlNHVWREckhRSWZiQ0RFVXpVVGpvZ0luZ2ZEMFhCL09Od2I5SFlmUExqVC9leEdkK2VUNCs1T0VvNml5VUFScW1WV0lTcGNWTVpQTVVBQkRnZ3FwTkpzcGZBTytVR2swekU4OXRvMTVaMjNuaHlNeHJjL3V3azVBREw4TWhlRzBCdTU1dVZDVDlNc0RwUGE0cXBUcVFHRGNEYXFhYUVqb2hYZmF2dVZtR3JCeVlIS0tkR3RJQXFRTHA2Njh0Zy9QdnBZZGFzNTU0NXBhT0FQSjVidUtyT0dodkREK04zMXQ4RGx3ZEgrclJ2L2pPYnpLSW9RSnE3cmFzU3dLMzVqNVVLanZWV3BMY0ZtY1R4MW5HcXI1VGNXNmdqQjZYZ2FUayt3RFJab3JXMjNPdWNoVnFHa1F2djdJSThBSmZYV2NzS1lZZWdDMFZxcHMvbjBXMWN1UDd5eFRpekgwSTNlZ3dPUlo3VnFrekVHSVpMWlNUUTU1aXcybkxwWGFYQk9nMVBBS0xRMG5rNU9LYVdtNjlyK2xyKzBYbSt0MkY0OVY1VTRERjc1OVd1QTBGM2Rnay9hY0Fid1I4REJQRUN2eE4yMFBOQ0gzb2hkamRQSnlmQjBNa2JRYS9BU3h6VXNGK2ZqV1I4UndsaUczSmRtQ3JkYnpiV3ZMRzQ4dXJ4K2NlWGNSYS91ejJlanc5MWIrN2MvT1RuY0xaUkVWcGE1U2RxeXVkUk9LSVZ4VlNDTmNKMVB0emUzYzRVZ0wvQ01HUW9YTXBYYnRXcURhRVNJTEtOenl1STBDY3lLejdsdWUzNXphZDFydGh2dE5VNjg0VFFkSGQwKzZSMk9UazdTTUZCWWtHWHN4dDB1bUNGdWdJZGpHUnBuVE1sU0pKcENGRGt5Qm5iUVhrZnRVRFF6eStsa01wb0ZVM3h5SzNWaU81Q3YxZG11TlZvTHk4dnQxYldHdjVERWNmZCtkK2ZmTy8wSC9XQWVYL3ptdDIzYmFQbnVRczByYVdJSW1RcGs4bFEzTGowMkRpT2FBVnlaUmZFcE91NSs0OG1uWkY3VUxCU3dIQ2p6ZkhQem9YUHJtN3FKUWhZREc4T3loV2FsTVpzSDB6aWVSMEVFMUg3dy9MT3d0OXVvLy9iRkYweWRwR25LNHVBM2IveTVOR1RCankvV2E5S1dsREtrVU4zUVdTYnJJa2JHRWwxVDlEeFNHRklHTVcyTGNoNHhGb2N6RkNjOUY3UFJjTEIvWi8vZXAvMmozY0ZoOTVubm4zM3VoYXRBSC94d0hKeWlZS0prVVNyTkp3ZVFLN1dFUlNWTEpMZ1NXSVNCWVZtWXlQU1hjOHR4b1pWSnVHRzZsR2RCRkVaUmNub3lPTjdmTzlnNzZCOGY2R3pXZHRLZi8rRjFNTU9wTDBhRk1KZWdzcVZKbkpRcnVreW0wRXVEaHdJb2hMbEF4UUNxRUFRdUtIZG9rQXZ1bUlJclh1TndPaG4xUnllOTB5QTRHazU3cHpQUE50ZDhkN1ZoTy9LY1VaQTlHKys5KzM2U3NXbWNuTTdCTVQ1Ykxlb1hpaXpVUEVzRk9BZEZFU3JnWkxVMy92clJUY29wckp2R2taUk9NK0pvUHAwTVdSb3QxcjJOcGVaQ3JXb1pCczNGYWZSZnY3dit4emQvOXFQbmI3NzVleXlHS1VNeGVmT0Rmd0ZMYisxQzRTV1lTbjFrd3NFLytTNkJ6dUVhc3NvclNocUhORTBNaGZFVXZqNnZXbHJOdFQyZE95VFdjeFNyMFFoK1BKb0lsbUl6bUwxMjliazc3L3dwaThkd041TEo2aDhtVVVFVmpCRGswcGF5WkNMWmJsNStmRGdOTkRRK1dhWVRMYVdaWlJtenZidFh6bmNNWGFsV1BNY3l3NVFqbVZYcXJZcERISlVKOUZwWmJ1T3JZMllzanhLWkZCTDRvRTRFc010NW11WFgvM2FqWk9ldGJRcjBMMkFJVjhyNWl1OXJvSVZ0aktad0toQ0Nsb0FYdzdKMGlBU3d3Yyt5UE9Bd0cvY25vL0Vzb2diUmZTbUpQZ3VTM2lRNENTS0dnNFcxNFBQeEdUL1ovbmpyRDBFSU9WUU4yTUtDRUF2WnB4UEZJY3lMWmc1cjhDaFVHTDNhdkw5N2Y3bFd6VVJHMExWQVBFZ3BjNGRaOTJ5MEQxR2FUYWJ6ZVpLZ0FhcFlaZ0pYUS9MaStmVVBidHcrNkpmS0dkVUZVQ3ZLQkZvUnBCZUJvbEgxS3NSZjdnUlJCRjA1c2dFS0s1SGRJc0MzL2FXRC9iMW1yVW9GV2xDMGFKcGxOK3hLSTBuNWVEU1pod25rZ0N3WVFTcWQ1ZTIvMzl6Wmw4eXdVaWdIN1FTNFFRRlFROHNGeGtoNHN2ZlpmdlNyL2ZFSUprU2N5RlZWWldrcWR3QmlUUXNQN2o1eXZxTVV6UjcwYjFaZHg1WU5XREU0NHhTVTMvMjRiSkhPbUJWek9lQTFaL1VaK0pUNDVueTUyVVRFeThCMFhCZi9RYUtNcGNnR2NGbzRuaUl5dDNQK1Z2Y1k2UllEd3FZMFF0WkE4VXJEMHpDSlArZDNaalovK3hHd0tYL3lBRmJ6SEZIM3hTczhGRS9TYXE4QldNNkZhWnB3SDFuOENCaWpTVWVESUJ0SnZkTG9IUjR1K2xWY0EycDFIOWtEL1JWaTY3MVBkN3U5Y2Ntc3V0akdkaVFQTUpIMnc1VkFBRXhwU0ZDVDRDbUNZQzNQNnhWUGxtaVVJc1FuVENqelE5SGxvSHNBd3VpdkFTNkVNQnN0SkxsbXcwTkxseXYwdzV2ZCs0TkpvWnhpcjI2anRJSkZtbERaMzJPQUs5N2hNbEFPZU1vZmFLQmFRZ2VsNWpycXcxZStkalFZUURic2dEazVYRWhtWVZaZVVjcG5tZlFSckpLaUhKSzAxVDZQSnpaQXFxTGV5Vkp2TzNhWk1yODhSQ1pER2RxanJ6emZXWUhLOEVhSk1zSXhUbExwYVZDenVMaUFVOGtWdFBEcXJWOG9tQWt3QTVpRkhGSWdISlJnd3JzTW84empXTVFUemlFdlhjQ3RDSlhTa1BKZUpuZEFMbHc1RElTbGJMZmdKM2dGRm1XdXh3VFBGTEFMWWE5ZU9FdVlNa3ZDNUJSenBHSjhnaXFvU0dpRzhVU1d3SXBsNkFoVjdJUU91bW5wRUxISXRCcGxEQmRCMDlBaEJaUURBcEFDU1FLVEpHVklscGdnNDhNVzBoNTVCcFBJSDJmRnZSRUx0TndBYjVCQUZjOGtvUktBWE1nTEk0ZkhJbE9jSVkvMHBLNWRlZ0xXTUhBblJic25SVWNCbGk0QTZlUkZSUTZZVndJck53QnczSEFMM01wUmxBUjAzbkxnRk03S1M1eDBRUlI4NlQ2b0VtVk5CRG4wQW94bi93R1AzM3FUc0xTMnpnQUFBQUJKUlU1RXJrSmdnZz09XCIpIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./images/easy_casket.data.png\n");

/***/ }),

/***/ "../node_modules/file-loader/dist/cjs.js?name=[name].[ext]!./appconfig.json":
/*!**********************************************************************************!*\
  !*** ../node_modules/file-loader/dist/cjs.js?name=[name].[ext]!./appconfig.json ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + \"appconfig.json\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL2ZpbGUtbG9hZGVyL2Rpc3QvY2pzLmpzP25hbWU9W25hbWVdLltleHRdIS4vYXBwY29uZmlnLmpzb24uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLHFCQUF1QixtQkFBbUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9URVNULy4vYXBwY29uZmlnLmpzb24/ZmIyMyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYXBwY29uZmlnLmpzb25cIjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/file-loader/dist/cjs.js?name=[name].[ext]!./appconfig.json\n");

/***/ }),

/***/ "../node_modules/file-loader/dist/cjs.js?name=[name].[ext]!./index.html":
/*!******************************************************************************!*\
  !*** ../node_modules/file-loader/dist/cjs.js?name=[name].[ext]!./index.html ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + \"index.html\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL2ZpbGUtbG9hZGVyL2Rpc3QvY2pzLmpzP25hbWU9W25hbWVdLltleHRdIS4vaW5kZXguaHRtbC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUscUJBQXVCLGVBQWUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9URVNULy4vaW5kZXguaHRtbD8xMmRlIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbmRleC5odG1sXCI7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../node_modules/file-loader/dist/cjs.js?name=[name].[ext]!./index.html\n");

/***/ }),

/***/ "./index.ts":
/*!******************!*\
  !*** ./index.ts ***!
  \******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"testing\": () => (/* binding */ testing),\n/* harmony export */   \"showSubImage\": () => (/* binding */ showSubImage)\n/* harmony export */ });\n/* harmony import */ var _alt1_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @alt1/base */ \"../node_modules/@alt1/base/dist/index.js\");\n\n__webpack_require__(/*! !file-loader?name=[name].[ext]!./index.html */ \"../node_modules/file-loader/dist/cjs.js?name=[name].[ext]!./index.html\");\n__webpack_require__(/*! !file-loader?name=[name].[ext]!./appconfig.json */ \"../node_modules/file-loader/dist/cjs.js?name=[name].[ext]!./appconfig.json\");\nvar images = _alt1_base__WEBPACK_IMPORTED_MODULE_0__.ImageDetect.webpackImages({\n    easyCasket: __webpack_require__(/*! ./images/easy_casket.data.png */ \"./images/easy_casket.data.png\")\n});\nfunction testing() {\n    var fullScreenImage = _alt1_base__WEBPACK_IMPORTED_MODULE_0__.captureHoldFullRs();\n    var position = fullScreenImage.findSubimage(images.easyCasket);\n    console.log(\"POSITION:\");\n    console.log(position);\n}\nfunction showSubImage(x, y, w, h) {\n    _alt1_base__WEBPACK_IMPORTED_MODULE_0__.capture(x, y, w, h).show();\n}\nif (window.alt1) {\n    alt1.identifyAppUrl(\"./appconfig.json\");\n}\n// \"use strict\";\n// A1lib.identifyApp(\"appconfig.json\");\n// let ectoplasmator = \"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\";\n// let shark = \"iVBORw0KGgoAAAANSUhEUgAAAB4AAAAQCAIAAACOWFiFAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAANOSURBVDhPbVRdSFRBFL535t67q6JBFBVYCmHSj0FGUEFBT6EvPQQRtfmTa1YSEZZWVFSUaZha/qygxq6YURhG5ItBRA8RRGGIhmj/Jr2WrXd33Z3bNzP3XlfwY/WeOXPON9+cOTNqWmZOeOrz/cajzGKKpViWxZhSURNqOXf436wZZ3z8aWJSScKeHVsJIdHo3N+wOfpleuz79IexHwPdpzwejRIViCdYoa+JgDfY7FdVO43DsS1LYQlw20Ng+5a8Xdu28GxV0TSa6jVyVq9Ynp6OKZWINJXL44aiEPkBVMeWzJqmIkgSb16fm5+3AbyqSk7W9yIAwZpGNEpTU4wl6V43i8NSIBkfSScIRAb0HKsOdV4qBgtKBHWUwrDi8cRsNGZGYwj03whx1ZRqOjU0umlt5u78nH2l9wSVsvdQIwgz1qzj1OCdX1NClALSzNhc2IzMmrGwGTMjsZqW/kBdUUd9Uem1+6iqTomu0RSvsTQjDUnJJGbETC7I/Byh6sn6HhiMMTM69y8SDUei17ueB275ZEBXQ8mRK10QTijFDrJXLYNTnsrQwyowGYZnnppDJZJeIzRwoQiR6JoEY5FIrKnvRbvD6yoYHhl1z79g58bCI02oqByGpyado0OIcPqrgqGrZTgilgAzRDOG4gg5Ak4fSFiwbHtmZkY40L129CIFwS7RmLzrGEjR1qzz6evWm0KyDLLZ+CF9HBmD8fPXVKquSZcrY2FBBHhLoDkYZ0c1Av2v2mt9Tqk4YPjPBqsP7IQNovGJL7grXi+VQxec2smxN4cPIfgRKG559BIn5sxwuAZYsK32Z+86B997dB1dKL3uFZOqeaqsNm78wYsduK/4oSV6W8sx7UbbSwvA1zzwtq+t4mHgeHBo2GsY0mn/W7Qg3XdKfJe7Km8/QBq/ji6xDBYigk1lDY/f8IWdDRlUzCI4SQcJNpfJgaTBH5q15HS3dHbUFSeshCgcbgnvJeQY2D9GfHP8QTJ0ur+8bbDnDOYKxC3PyMqxXz7JshCuWLW11oemE+r4aZ443xO6W8aPA8T44FpqRNfxXnEBknpJdi6njsfj0d/feGISsCyeTW8Kf3r+fB2XTgdY1a64xJPOSuwD1JiQb5NnZdZ/qtBfTMJbfykAAAAASUVORK5CYII=\";\n// let fontDigits = \"iVBORw0KGgoAAAANSUhEUgAAAGQAAAAKCAYAAABCHPt+AAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwQAADsEBuJFr7QAAABh0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMS41ZEdYUgAAAZBJREFUWEe1jgtuBCEMQ+cY3fsfdIpZjIxJ+FSqJU/Ic8jwvO9LQ9qroYhRnmkecWfkqtVMxqlV7tlJvjMUna/NA6RVXfXU0YEV9JBDzIa8acgaV9a5WrLaoDYOaVY5s1aZQUNexOwk3xmq91GbIZ6vjA+kC1nVfGxn/oBF7tk025zxClE1z3agWuZ7b/udo/nbHd34nDxo9QOoxPXoHPKMuyCyDpqU10zuQJ7T2TtV/h7m/bzIWYcsmk/esTU+fvnmB1CJwowcUs5d00702Z2mOtOkOSHzkC/u9gCyHVBUex79M2BHxmd6wOEPoIIn7p72m8jV4ZuEeZ6xiGdzBVeezXv1nH3GjswD1OvBD6Bojob62edaH+5snrJdj2qsZ5u77mzeq+fsM3ZkbaCypx6dUxGj9I7ORDu/IP/X9h2WR7vUqmi32nex9+o5+4wdeWySJeCekak11xnn9O0dZlEeMTXv7eZgn2HvFf75fHCGav89zjtOjU+qtnRQxFSrPMv+cof6r7vQbY5eGftzP+8vIcBdiIYxxU8AAAAASUVORK5CYII=\";\n// // yellow:\n// // let fontDigits = \"iVBORw0KGgoAAAANSUhEUgAAAEcAAAAKCAYAAADmdkOtAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAFVSURBVEhLtZOBjsMwCEPT/f8/d3FkkEOBtpP2pF4CjoGuuWOQ8xzncQyPlUxDjtuR+UzPfN15421Nbhedftf7opsYmwDkmHdNzq189KleaFsOSF4fp6tJlifWVx+e6G31IGrsMBfzHnd61IqzZR5QW1uuoKqxtlxv+3fxB38mCPQ6+eGGdR7FiqtaaoBDbJiHYQRfVfW07gS6a+hvPjxxHtNT2MzlGIMsB5hfW66R6hpbPvpUcxBL7qID1bkuQj71AuTtQYic3ZzXoAi/AgpVX9Hy20DTu60Czqee2Qtor6t71xXLl168C3s4H71W8sItdz8MdG4v6BC2gs4jpLM9nfsBWw0PqhfWoW2A7EXicHYmqwnYD3i+8yRzuJ7VUjpvRGvFA5XJiqvmDYWsHshqgqxf59Gema/qAzpvZNWa/1LztyrA/Y9yllM6vdJ+8Rj/8o4xxhf9/mhSgxnKogAAAABJRU5ErkJggg==\";\n// let fontImage;\n// let sharkImage;\n// A1lib.ImageDetect.imageDataFromBase64(\"iVBORw0KGgoAAAANSUhEUgAAAB0AAAAUCAYAAABxnDbHAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAVtSURBVEhLbVVLb9xUGD1+v+aRTNI2bZKmSdq0FFWqYIsQiD8DEmxYwKKbSrBEYgESC4TYgtRFoSxYQNRKCAkhIWil0Kql5NWSNDOZZDwztsf2mPNdz5C24kSOPfb1Pd8538Paa5cvFo7jwgwmkGUZ9ttNLC2fx9LSBYxxuLeNOGzCtF04lWk0pk9iMAjxaP0ODM1Aw0gRRT1YlgW3UkXunUZQqfO6BturotNto9dp46NPP+FuBXTbCZCmQ0VYDIfQ8wHazT0ctPcxzPmbf67nw3J89ULU2SVhxHcyZLmBJANydxqTcy/i2MIlnJhfwcnTKwjqDXQ7LWw/XMPmvT/Q3H6oBAiM5cWzV4cwwHeRZyks5CiyHLrpoladgKEbKAoSDLoYpBGSOIRdaSDPTbhBA5PH5xFMzmBiZg65EWDvMEHr0T00d7bRajaR9EIgDSkqxe0H64pUzxgxTzxMhmDx0kY2pNp2C53wUC3yaZXheoCmY/rUMmoT05g6cQIzs3OYaEwhjiKs/72Ou3/exe4/uwi7ES68/gZc18J0w8dULVD7jKGRpXj1pZdBQbx0SAwM01RZu7h4DqfnF5lLncoiGIZBm10UXJdEKboMKoq66Id9Gg+89d7bKkX+xCS++OAqbJP2JwnSKMTn3/7AFQX82SUlEVkaw+SVOezTigQ6I7BdB4M8R58BRL0OjDzj8wKd1h6ebN7H5l93sPvoIZ5sr+NNkr374RV4tboiFAhRP2xz8z4SiWgEcVaRMiDowxwOC8bWc9hGDsv2SZoh7PfQ78c4aD7B480NbG1sYffxFsy0gxkvwcdff6XInkeFFe3zyPOE9seju8KljUj5P6OiLEsUsSDqHaLd2mUx7OAgZHvsHWLnoIPAtTHHPM1OuPBsU7XJ87h18xZiFs4hyQ66MaI4Gj0h6KLmzCwWyc4GXrl0Dr5fJlyzXCSpjijpst9qODbZQMOz4ZDEsWy2VYghiy2MBrjy5TXavK3eu3HjO6z9uIpADxGzJnK6xxOurf7KpwWCubOsCzahOYo0YXMPkpgtQ0sSKfMuqo6Omu8iMHN4RsScdhH3Wmi122i12iiYf4GQffb+O1j7/htkEfubrhlsu2yQohezTkYomC6ZB1ptYaXobDzA5TOnYLFrqpUAnmOjl+QwqapSn0bFM+BpKft1iEE2hCvrqDzjUOnHA0QkiUlgsDi4BBoVJlx3/efbYzqqXCRpofbQRb7AcUyOBXDa5IrQ4aSShHf2d5nbfXT6A1iGiUbgKZs7YYyddogm2yUlgQwRQcpcRv8RStmScP6cCkaBva7VF18oMlrR2yrV6lThc8aatj1aBdSofqoesGh0NTJ7vZ7aXDaqsLV6VFmg3PX6T8+pK0hiMoVUzx8YZoOykKShLYcvk/giiQ2TVWk4PAwE/BDU6lWWd8KRdqC2kzJQZU8k7OUkzbH6293RnbIplTrmUKDRIZPWp8lAjSPNPr5QaDqjIYHB85hYDWNCApis+vDYKkfIkfLDwFhx8/f7o3tHZE9DiIW0/FHmVAvmV9TqlOPKsstC6D9ef4a4Gpios3/ZBKzIBJlEziBLwiMyx7bUHB5DyJRa5jGnI5wLtIgChVQGg8DQNfZVuYn0rrKaH4KpRoNTipUbd5Wtq3fGn6mySIQsp2ypjWeVCeHoWvC0UvFbXpARVfCBzEd5Uaw+T2Ix1vdN/LK2Wb48UufOLpNEKt3iYGfLMOgxxsTjvJaQ/UekolSGxNNn2cBk40oPH6Ekc2bOqLOs5YBRQQrEJddzlYD/A4kUKWcSC4j5EQjRmHhsczB/lv/lulBkYmcZUBmc9LmokkPujYe7PBOI7VKgArVO0/Av6onYq0XNu+EAAAAASUVORK5CYII=\").then(function (i) { TreasureTrailLogger.easyCasketFinderImage = i }, function (i) { console.log(\"Could not load the easy casket finder image.\") });\n// A1lib.ImageDetect.imageDataFromBase64(\"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\").then(function (i) { TreasureTrailLogger.eliteCasketFinderImage = i }, function (i) { console.log(\"Could not load the elite casket finder image.\") });\n// A1lib.ImageDetect.imageDataFromBase64(ectoplasmator).then(function (i) { TreasureTrailLogger.ectoImg = i }, function (i) { console.log(\"Could not load the ectoplasmator image.\") });\n// A1lib.ImageDetect.imageDataFromBase64(shark).then(function (i) { TreasureTrailLogger.shark = i }, function (i) { console.log(\"Could not load the shark image.\") });\n// A1lib.ImageDetect.imageDataFromBase64(fontDigits).then(function (i) { TreasureTrailLogger.fontDigits = i }, function (i) { console.log(\"Could not load the font digits image.\") });\n// A1lib.ImageDetect.imageDataFromBase64(fontDigits).then(function (i) { fontImage = i }, function (i) { console.log(\"Could not load the font digits image.\") });\n// A1lib.ImageDetect.imageDataFromBase64(shark).then(function (i) { sharkImage = i }, function (i) { console.log(\"Could not load the shark image.\") });\n// // let font = OCR.generatefont(fontImage, \"0123456789m()\", \"\", {}, 7, 4, 0.9, true);\n// // Inventory spot dimensions: 38x34\n// function TreasureTrailLogger() {\n// \tvar me = this;\n// \tthis.findShark = function () {\n// \t\tlet screenImage = A1lib.captureHoldFullRs();\n// \t\tlet position = screenImage.findSubimage(TreasureTrailLogger.shark);\n// \t\tconsole.log(\"shark position\");\n// \t\tconsole.log(position);\n// \t\tconsole.log(\"---\");\n// \t\treturn position;\n// \t}\n// \tthis.testing = function () {\n// \t\tlet screenImage = A1lib.captureHoldFullRs();\n// \t\tlet position = screenImage.findSubimage(TreasureTrailLogger.ectoImg);\n// \t\tconsole.log(\"ecto position\");\n// \t\tconsole.log(position);\n// \t\tconsole.log(\"@@@\");\n// \t\treturn 0;\n// \t}\n// \tthis.findEasyCaskets = function () {\n// \t\tlet screenImage = A1lib.captureHoldFullRs();\n// \t\tlet position = screenImage.findSubimage(TreasureTrailLogger.easyCasketFinderImage);\n// \t\tconsole.log(\"easy position\");\n// \t\tconsole.log(position);\n// \t\tconsole.log(\"===\");\n// \t\treturn 0;\n// \t}\n// \tthis.findEliteCaskets = function () {\n// \t\tlet screenImage = A1lib.captureHoldFullRs();\n// \t\tlet position = screenImage.findSubimage(TreasureTrailLogger.eliteCasketFinderImage);\n// \t\tconsole.log(\"elite position\");\n// \t\tconsole.log(position);\n// \t\tconsole.log(\"###\");\n// \t\treturn 0;\n// \t}\n// }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./index.ts\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript)
/******/ 				scriptUrl = document.currentScript.src
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) scriptUrl = scripts[scripts.length - 1].src
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./index.ts");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});